{"file_contents":{"design_guidelines.md":{"content":"# RexSquad Bot Manager - Design Guidelines\n\n## Design Approach: Modern Dashboard System\n\n**Selected Framework:** Material Design 3 with dashboard-optimized patterns\n**Justification:** This is a utility-focused admin panel requiring information density, clear hierarchy, and efficient workflows. Material Design 3 provides the robust component system needed for complex data displays while maintaining visual clarity.\n\n## Core Design Principles\n\n1. **Information Clarity:** Prioritize readability and scanability of data\n2. **Efficient Navigation:** Quick access to all features within 2 clicks\n3. **Status Awareness:** Always-visible system status and real-time updates\n4. **Mobile Adaptability:** Full functionality on all screen sizes\n\n## Color Palette\n\n### Light Mode\n- **Primary:** 220 90% 56% (vibrant blue for actions and highlights)\n- **Primary Variant:** 220 85% 45% (darker blue for hover states)\n- **Background:** 0 0% 98% (soft white for main content)\n- **Surface:** 0 0% 100% (pure white for cards)\n- **Surface Variant:** 220 15% 96% (subtle gray for sidebar)\n- **Border:** 220 13% 91% (light borders for separation)\n- **Text Primary:** 220 18% 20% (dark slate for main text)\n- **Text Secondary:** 220 9% 46% (medium gray for labels)\n\n### Dark Mode  \n- **Primary:** 220 90% 60% (slightly lighter blue)\n- **Background:** 220 18% 12% (dark slate background)\n- **Surface:** 220 15% 16% (elevated dark surface)\n- **Surface Variant:** 220 18% 20% (sidebar dark)\n- **Border:** 220 10% 25% (subtle borders)\n- **Text Primary:** 220 15% 95% (light text)\n- **Text Secondary:** 220 8% 65% (muted text)\n\n### Status Colors\n- **Success:** 142 76% 45% (green for active/success)\n- **Warning:** 38 92% 50% (amber for warnings)\n- **Error:** 0 84% 60% (red for errors/alerts)\n- **Info:** 199 89% 48% (cyan for information)\n\n## Typography\n\n**Font Stack:** 'Inter' (primary), system-ui, -apple-system fallback\n\n**Scale:**\n- **Display:** 2.5rem/3rem, weight 700 (page headers)\n- **H1:** 2rem/2.5rem, weight 600 (section titles)\n- **H2:** 1.5rem/2rem, weight 600 (card headers)\n- **H3:** 1.25rem/1.75rem, weight 600 (subsections)\n- **Body Large:** 1rem/1.5rem, weight 500 (primary content)\n- **Body:** 0.875rem/1.25rem, weight 400 (standard text)\n- **Caption:** 0.75rem/1rem, weight 500 (labels, metadata)\n\n## Layout System\n\n**Spacing Units:** Tailwind scale with primary units of 2, 4, 8, 12, 16, 20, 24\n- Component padding: p-4 to p-6\n- Section spacing: mb-8 to mb-12\n- Card gaps: gap-4 to gap-6\n\n**Grid Structure:**\n- **Sidebar:** Fixed 280px width desktop, full-screen overlay mobile\n- **Main Content:** Dynamic with max-width 1400px container\n- **Stats Grid:** 1 column mobile, 2 columns tablet, 4 columns desktop\n- **Content Cards:** Single column mobile, 2 columns tablet+\n\n**Breakpoints:**\n- Mobile: < 768px\n- Tablet: 768px - 1024px  \n- Desktop: > 1024px\n\n## Component Library\n\n### Navigation Sidebar\n- **Structure:** Fixed position with smooth slide-in animation\n- **Header:** Bot logo + name with accent background (surface variant)\n- **Menu Items:** Full-width buttons with left border accent on active state\n- **Icons:** 20px consistent sizing, positioned left with 12px margin\n- **Active State:** Primary color left border (4px), primary/10 background tint\n- **Mobile:** Slide-in overlay with backdrop blur, hamburger toggle in header\n\n### Top Bar\n- **Height:** 64px fixed\n- **Content:** Hamburger menu (mobile), breadcrumbs/page title (left), status indicator + user actions (right)\n- **Status Indicator:** Pill-shaped badge with pulsing dot animation, success color when active\n- **Sticky:** Position sticky with subtle bottom border shadow\n\n### Stat Cards\n- **Layout:** Icon (48px circular) + value (2.5rem) + label (caption)\n- **Icon Background:** Gradient from primary to primary-variant, white icon\n- **Trend Indicator:** Small arrow + percentage in success/error color (bottom right)\n- **Hover:** Subtle lift with shadow elevation increase\n- **Border:** 1px solid with hover glow effect\n\n### Data Tables\n- **Header:** Surface variant background, sticky positioning\n- **Rows:** Alternating subtle backgrounds, 1px bottom border\n- **Actions:** Icon buttons revealed on row hover\n- **Mobile:** Card-based layout with key-value pairs stacked\n- **Pagination:** Bottom-aligned controls with page numbers + arrows\n\n### Member Cards (Mobile)\n- **Avatar:** 48px circular with gradient background, initials in white\n- **Layout:** Horizontal flex with avatar left, info center, actions right\n- **Level Badge:** Colored pill (success/warning/neutral based on level)\n- **Swipe Actions:** Reveal delete/edit on left swipe (mobile)\n\n### Activity Logs\n- **Container:** Dark terminal-style (220 18% 12% background)\n- **Entries:** Left-bordered colored accents (info/success/warning/error)\n- **Timestamp:** Monospace font, muted text\n- **Auto-scroll:** Latest entries appear at bottom with smooth animation\n- **Max Height:** 400px with custom scrollbar styling\n\n### Bot Configuration Panel\n- **Layout:** Two-column form with live preview card\n- **Inputs:** Outlined style with floating labels\n- **Tone Selector:** Radio button grid with visual personality indicators\n- **Welcome Preview:** Card showing formatted message with user placeholder\n- **Save Button:** Prominent primary action, full-width mobile\n\n### Protection Settings\n- **Toggle Switches:** Material-style with smooth animation and state labels\n- **Threshold Inputs:** Number inputs with +/- steppers\n- **Pattern List:** Chips with delete icons, add new input at bottom\n- **Admin List:** Avatar grid with remove overlay on hover\n\n### Modals/Dialogs\n- **Backdrop:** Blur effect with 40% opacity dark overlay\n- **Content:** Centered card with 16px border radius, max-width 480px\n- **Actions:** Right-aligned buttons with 8px gap\n- **Close:** X button top-right, ESC key support\n\n## Responsive Behavior\n\n### Mobile (< 768px)\n- Sidebar: Full-screen slide-in overlay\n- Stats: Single column, full-width cards\n- Tables: Transform to vertical card layout\n- Forms: Single column, full-width inputs\n- Spacing: Reduced to p-4, gap-4\n\n### Tablet (768px - 1024px)  \n- Sidebar: Collapsible with icon-only mini mode option\n- Stats: 2 column grid\n- Tables: Horizontal scroll with sticky first column\n- Forms: Strategic 2-column layout for related fields\n\n### Desktop (> 1024px)\n- Sidebar: Always visible, 280px fixed\n- Stats: 4 column grid\n- Tables: Full display with all columns\n- Forms: Optimized 2-3 column layout\n\n## Animations & Transitions\n\n**Core Principles:** Subtle, purposeful, non-distracting\n\n- **Page Transitions:** 200ms fade-in for content switches\n- **Sidebar Toggle:** 300ms cubic-bezier slide animation  \n- **Hover States:** 150ms all properties\n- **Status Indicators:** 2s infinite pulse for \"active\" dots\n- **Toasts/Alerts:** Slide-in from top-right, 300ms\n- **Loading States:** Skeleton screens with shimmer effect (no spinners)\n\n**Critical:** Respect prefers-reduced-motion for accessibility\n\n## Icons\n\n**Library:** Material Icons via CDN\n**Sizing:** 20px standard, 24px for primary actions, 16px for inline\n**Color:** Inherit from parent, use text-secondary for passive icons\n\n## Dark Mode Implementation\n\n- Toggle switch in top bar (moon/sun icon)\n- Persist preference in localStorage\n- Smooth 200ms transition on theme switch\n- Ensure all status colors maintain WCAG AA contrast in both modes\n- Adjust surface elevations with subtle borders instead of heavy shadows\n\n## Images\n\nNo hero images required for this dashboard application. All visual interest comes from:\n- Gradient icon backgrounds in stat cards\n- User avatars in member lists\n- Status indicators and colored badges\n- Data visualizations (if charts are added later)\n\nThis dashboard prioritizes data density and functionality over decorative imagery.","size_bytes":7775},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { promises as fs } from \"fs\";\nimport path from \"path\";\nimport { setupBotIntegration } from \"./bot-integration\";\n\n// File paths for data storage\nconst DATA_DIR = path.join(process.cwd(), 'data');\nconst FILES = {\n  MEMBERS: path.join(DATA_DIR, 'club_members.json'),\n  SETTINGS: path.join(DATA_DIR, 'settings.json'),\n  BOT_CONFIG: path.join(DATA_DIR, 'bot_configuration.json'),\n  SPAM_WORDS: path.join(DATA_DIR, 'spam.txt'),\n  BANNED_PATTERNS: path.join(DATA_DIR, 'banned_patterns.txt'),\n  ADMINS: path.join(DATA_DIR, 'admins.txt'),\n  BOT_STATUS: path.join(DATA_DIR, 'bot_status.json'),\n};\n\n// Ensure data directory exists\nasync function ensureDataDir() {\n  try {\n    await fs.mkdir(DATA_DIR, { recursive: true });\n  } catch (error) {\n    console.error('Error creating data directory:', error);\n  }\n}\n\n// Default data structures\nconst DEFAULT_SETTINGS = {\n  allowAvatars: true,\n  banLevel: 10,\n  allowGuestIds: false,\n  createdAt: new Date().toISOString()\n};\n\nconst DEFAULT_BOT_CONFIG = {\n  botName: 'RexBot',\n  botTone: 'upbeat',\n  welcomeMessage: '✨️˚.⭒Wᴇʟᴄᴏᴍᴇ {name}˚✨️',\n  createdAt: new Date().toISOString()\n};\n\nconst DEFAULT_BOT_STATUS = {\n  isRunning: false,\n  lastStarted: null,\n  lastStopped: null,\n  cacheCleared: null,\n  uptime: 0\n};\n\n// Helper functions\nasync function readJsonFile(filePath: string, defaultValue: any = null) {\n  try {\n    const data = await fs.readFile(filePath, 'utf8');\n    return JSON.parse(data);\n  } catch (error: any) {\n    if (error.code === 'ENOENT') {\n      if (defaultValue !== null) {\n        await writeJsonFile(filePath, defaultValue);\n        return defaultValue;\n      }\n      return null;\n    }\n    throw error;\n  }\n}\n\nasync function writeJsonFile(filePath: string, data: any) {\n  await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf8');\n}\n\nasync function readTextFile(filePath: string, defaultValue: string = '') {\n  try {\n    return await fs.readFile(filePath, 'utf8');\n  } catch (error: any) {\n    if (error.code === 'ENOENT') {\n      await fs.writeFile(filePath, defaultValue, 'utf8');\n      return defaultValue;\n    }\n    throw error;\n  }\n}\n\nasync function writeTextFile(filePath: string, data: string) {\n  await fs.writeFile(filePath, data, 'utf8');\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Ensure data directory exists on startup\n  await ensureDataDir();\n  \n  // Setup bot integration with /api/jack/* endpoints\n  setupBotIntegration(app);\n\n  // ====================\n  // MEMBER MANAGEMENT ENDPOINTS\n  // ====================\n\n  // Get club members with pagination and stats\n  app.get('/api/members', async (req, res) => {\n    try {\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 50;\n\n      if (page < 1 || limit < 1 || limit > 100) {\n        return res.json({\n          success: false,\n          message: 'Invalid pagination parameters'\n        });\n      }\n\n      const allMembers = await readJsonFile(FILES.MEMBERS, []);\n\n      // Calculate level statistics\n      const levelStats = {\n        total: allMembers.length,\n        lowLevel: allMembers.filter((m: any) => m.LVL >= 1 && m.LVL <= 4).length,\n        mediumLevel: allMembers.filter((m: any) => m.LVL >= 5 && m.LVL <= 9).length,\n        highLevel: allMembers.filter((m: any) => m.LVL >= 10).length\n      };\n\n      // Paginate\n      const startIndex = (page - 1) * limit;\n      const endIndex = startIndex + limit;\n      const paginatedMembers = allMembers.slice(startIndex, endIndex);\n\n      res.json({\n        success: true,\n        data: {\n          members: paginatedMembers,\n          total: allMembers.length,\n          page,\n          limit,\n          totalPages: Math.ceil(allMembers.length / limit),\n          levelStats\n        }\n      });\n    } catch (error: any) {\n      console.error('Error loading members:', error);\n      res.json({ success: false, message: 'Failed to load members' });\n    }\n  });\n\n  // Remove individual member\n  app.delete('/api/members/:uid', async (req, res) => {\n    try {\n      const { uid } = req.params;\n\n      if (!uid) {\n        return res.json({ success: false, message: 'Member UID is required' });\n      }\n\n      const allMembers = await readJsonFile(FILES.MEMBERS, []);\n      const memberIndex = allMembers.findIndex((m: any) => m.UID === uid);\n\n      if (memberIndex === -1) {\n        return res.json({ success: false, message: 'Member not found' });\n      }\n\n      const memberToRemove = allMembers[memberIndex];\n      allMembers.splice(memberIndex, 1);\n\n      await writeJsonFile(FILES.MEMBERS, allMembers);\n\n      console.log(`Member removed: ${memberToRemove.NM} (UID: ${uid})`);\n\n      res.json({\n        success: true,\n        message: `Member ${memberToRemove.NM} removed successfully`,\n        removedMember: {\n          UID: memberToRemove.UID,\n          NM: memberToRemove.NM,\n          LVL: memberToRemove.LVL\n        }\n      });\n    } catch (error: any) {\n      console.error('Error removing member:', error);\n      res.json({ success: false, message: 'Failed to remove member' });\n    }\n  });\n\n  // Bulk remove members by level\n  app.post('/api/members/bulk-remove', async (req, res) => {\n    try {\n      const { level, count } = req.body;\n\n      if (typeof level !== 'number' || typeof count !== 'number') {\n        return res.json({ success: false, message: 'Level and count must be numbers' });\n      }\n\n      if (level < 1 || level > 100 || count < 1 || count > 100) {\n        return res.json({ success: false, message: 'Invalid level or count' });\n      }\n\n      const allMembers = await readJsonFile(FILES.MEMBERS, []);\n      const membersAtLevel = allMembers.filter((m: any) => m.LVL === level);\n\n      if (membersAtLevel.length === 0) {\n        return res.json({ success: false, message: `No members found at level ${level}` });\n      }\n\n      const removeCount = Math.min(count, membersAtLevel.length);\n      const membersToRemove = membersAtLevel.slice(0, removeCount);\n      const uidsToRemove = membersToRemove.map((m: any) => m.UID);\n\n      const updatedMembers = allMembers.filter((m: any) => !uidsToRemove.includes(m.UID));\n      await writeJsonFile(FILES.MEMBERS, updatedMembers);\n\n      console.log(`Bulk removed ${removeCount} members at level ${level}`);\n\n      res.json({\n        success: true,\n        message: `Successfully removed ${removeCount} members at level ${level}`,\n        removedCount: removeCount,\n        level,\n        remainingAtLevel: membersAtLevel.length - removeCount\n      });\n    } catch (error: any) {\n      console.error('Error bulk removing members:', error);\n      res.json({ success: false, message: 'Failed to bulk remove members' });\n    }\n  });\n\n  // ====================\n  // BOT CONFIGURATION ENDPOINTS\n  // ====================\n\n  // Get bot configuration\n  app.get('/api/config/bot', async (req, res) => {\n    try {\n      const config = await readJsonFile(FILES.BOT_CONFIG, DEFAULT_BOT_CONFIG);\n      res.json({ success: true, data: config });\n    } catch (error: any) {\n      console.error('Error loading bot config:', error);\n      res.json({ success: false, message: error.message });\n    }\n  });\n\n  // Save bot configuration\n  app.put('/api/config/bot', async (req, res) => {\n    try {\n      const { botName, botTone, welcomeMessage } = req.body;\n\n      if (!botName || !botTone || !welcomeMessage) {\n        return res.json({ success: false, message: 'Missing required fields' });\n      }\n\n      const validTones = ['upbeat', 'sarcastic', 'wise', 'energetic', 'chill', 'phuppo', 'gangster', 'party'];\n      if (!validTones.includes(botTone)) {\n        return res.json({ success: false, message: 'Invalid bot tone' });\n      }\n\n      const config = {\n        botName: botName.trim(),\n        botTone,\n        welcomeMessage: welcomeMessage.trim(),\n        updatedAt: new Date().toISOString()\n      };\n\n      await writeJsonFile(FILES.BOT_CONFIG, config);\n      console.log(`Bot configuration updated: ${botName} (${botTone})`);\n\n      res.json({ success: true, message: 'Bot configuration saved successfully' });\n    } catch (error: any) {\n      console.error('Error saving bot config:', error);\n      res.json({ success: false, message: error.message });\n    }\n  });\n\n  // ====================\n  // SETTINGS ENDPOINTS\n  // ====================\n\n  // Get settings\n  app.get('/api/settings', async (req, res) => {\n    try {\n      const settings = await readJsonFile(FILES.SETTINGS, DEFAULT_SETTINGS);\n      res.json({ success: true, data: settings });\n    } catch (error: any) {\n      console.error('Error loading settings:', error);\n      res.json({ success: false, message: error.message });\n    }\n  });\n\n  // Save settings\n  app.put('/api/settings', async (req, res) => {\n    try {\n      const { allowAvatars, banLevel, allowGuestIds } = req.body;\n\n      if (\n        typeof allowAvatars !== 'boolean' ||\n        typeof allowGuestIds !== 'boolean' ||\n        typeof banLevel !== 'number' ||\n        banLevel < 1 ||\n        banLevel > 100\n      ) {\n        return res.json({ success: false, message: 'Invalid settings data' });\n      }\n\n      const settings = {\n        allowAvatars,\n        banLevel,\n        allowGuestIds,\n        updatedAt: new Date().toISOString()\n      };\n\n      await writeJsonFile(FILES.SETTINGS, settings);\n      console.log(`Settings updated: Avatars: ${allowAvatars}, Ban Level: ${banLevel}, Guest IDs: ${allowGuestIds}`);\n\n      res.json({ success: true, message: 'Settings saved successfully' });\n    } catch (error: any) {\n      console.error('Error saving settings:', error);\n      res.json({ success: false, message: error.message });\n    }\n  });\n\n  // ====================\n  // PROTECTION ENDPOINTS\n  // ====================\n\n  // Get spam words\n  app.get('/api/protection/spam-words', async (req, res) => {\n    try {\n      const data = await readTextFile(FILES.SPAM_WORDS, '');\n      const words = data.split('\\n').filter(line => line.trim() !== '');\n      res.json({ success: true, data: words });\n    } catch (error: any) {\n      console.error('Error loading spam words:', error);\n      res.json({ success: false, message: error.message });\n    }\n  });\n\n  // Save spam words\n  app.put('/api/protection/spam-words', async (req, res) => {\n    try {\n      const { words } = req.body;\n\n      if (!Array.isArray(words)) {\n        return res.json({ success: false, message: 'Words must be an array' });\n      }\n\n      const content = words.join('\\n');\n      await writeTextFile(FILES.SPAM_WORDS, content);\n      console.log(`Spam words updated: ${words.length} words`);\n\n      res.json({ success: true, message: 'Spam words saved successfully' });\n    } catch (error: any) {\n      console.error('Error saving spam words:', error);\n      res.json({ success: false, message: error.message });\n    }\n  });\n\n  // Get banned patterns\n  app.get('/api/protection/banned-patterns', async (req, res) => {\n    try {\n      const data = await readTextFile(FILES.BANNED_PATTERNS, '');\n      const patterns = data.split(',').map(item => item.trim()).filter(item => item !== '');\n      res.json({ success: true, data: patterns });\n    } catch (error: any) {\n      console.error('Error loading banned patterns:', error);\n      res.json({ success: false, message: error.message });\n    }\n  });\n\n  // Save banned patterns\n  app.put('/api/protection/banned-patterns', async (req, res) => {\n    try {\n      const { patterns } = req.body;\n\n      if (!Array.isArray(patterns)) {\n        return res.json({ success: false, message: 'Patterns must be an array' });\n      }\n\n      const content = patterns.join(', ');\n      await writeTextFile(FILES.BANNED_PATTERNS, content);\n      console.log(`Banned patterns updated: ${patterns.length} patterns`);\n\n      res.json({ success: true, message: 'Banned patterns saved successfully' });\n    } catch (error: any) {\n      console.error('Error saving banned patterns:', error);\n      res.json({ success: false, message: error.message });\n    }\n  });\n\n  // Get admins\n  app.get('/api/protection/admins', async (req, res) => {\n    try {\n      const data = await readTextFile(FILES.ADMINS, '');\n      const admins = data.split(',').map(item => item.trim()).filter(item => item !== '');\n      res.json({ success: true, data: admins });\n    } catch (error: any) {\n      console.error('Error loading admins:', error);\n      res.json({ success: false, message: error.message });\n    }\n  });\n\n  // Save admins\n  app.put('/api/protection/admins', async (req, res) => {\n    try {\n      const { admins } = req.body;\n\n      if (!Array.isArray(admins)) {\n        return res.json({ success: false, message: 'Admins must be an array' });\n      }\n\n      const content = admins.join(', ');\n      await writeTextFile(FILES.ADMINS, content);\n      console.log(`Admins updated: ${admins.length} admins`);\n\n      res.json({ success: true, message: 'Admins saved successfully' });\n    } catch (error: any) {\n      console.error('Error saving admins:', error);\n      res.json({ success: false, message: error.message });\n    }\n  });\n\n  // ====================\n  // BOT CONTROL ENDPOINTS\n  // ====================\n\n  // Get bot status\n  app.get('/api/bot/status', async (req, res) => {\n    try {\n      const status = await readJsonFile(FILES.BOT_STATUS, DEFAULT_BOT_STATUS);\n      res.json({ success: true, data: status });\n    } catch (error: any) {\n      console.error('Error reading bot status:', error);\n      res.json({ success: false, message: error.message });\n    }\n  });\n\n  // Start bot\n  app.post('/api/bot/start', async (req, res) => {\n    try {\n      const status = await readJsonFile(FILES.BOT_STATUS, DEFAULT_BOT_STATUS);\n      \n      if (status.isRunning) {\n        return res.json({ success: false, message: 'Bot is already running' });\n      }\n\n      const now = new Date().toISOString();\n      status.isRunning = true;\n      status.lastStarted = now;\n      // Preserve lastStopped for audit history\n\n      await writeJsonFile(FILES.BOT_STATUS, status);\n      console.log('Bot started at:', now);\n\n      res.json({ success: true, message: 'Bot started successfully', data: status });\n    } catch (error: any) {\n      console.error('Error starting bot:', error);\n      res.json({ success: false, message: error.message });\n    }\n  });\n\n  // Stop bot\n  app.post('/api/bot/stop', async (req, res) => {\n    try {\n      const status = await readJsonFile(FILES.BOT_STATUS, DEFAULT_BOT_STATUS);\n      \n      if (!status.isRunning) {\n        return res.json({ success: false, message: 'Bot is not running' });\n      }\n\n      const now = new Date().toISOString();\n      status.isRunning = false;\n      status.lastStopped = now;\n\n      await writeJsonFile(FILES.BOT_STATUS, status);\n      console.log('Bot stopped at:', now);\n\n      res.json({ success: true, message: 'Bot stopped successfully', data: status });\n    } catch (error: any) {\n      console.error('Error stopping bot:', error);\n      res.json({ success: false, message: error.message });\n    }\n  });\n\n  // Restart bot\n  app.post('/api/bot/restart', async (req, res) => {\n    try {\n      const status = await readJsonFile(FILES.BOT_STATUS, DEFAULT_BOT_STATUS);\n      \n      const now = new Date().toISOString();\n      status.isRunning = true;\n      status.lastStarted = now;\n      // Preserve lastStopped for audit history\n\n      await writeJsonFile(FILES.BOT_STATUS, status);\n      console.log('Bot restarted at:', now);\n\n      res.json({ success: true, message: 'Bot restarted successfully', data: status });\n    } catch (error: any) {\n      console.error('Error restarting bot:', error);\n      res.json({ success: false, message: error.message });\n    }\n  });\n\n  // Clear cache\n  app.post('/api/bot/clear-cache', async (req, res) => {\n    try {\n      const status = await readJsonFile(FILES.BOT_STATUS, DEFAULT_BOT_STATUS);\n      \n      const now = new Date().toISOString();\n      status.cacheCleared = now;\n\n      await writeJsonFile(FILES.BOT_STATUS, status);\n      console.log('Bot cache cleared at:', now);\n\n      res.json({ success: true, message: 'Cache cleared successfully', data: status });\n    } catch (error: any) {\n      console.error('Error clearing cache:', error);\n      res.json({ success: false, message: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":16383},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":584},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { TopBar } from \"@/components/top-bar\";\nimport Overview from \"@/pages/overview\";\nimport BotControls from \"@/pages/bot-controls\";\nimport Configuration from \"@/pages/configuration\";\nimport Settings from \"@/pages/settings\";\nimport Members from \"@/pages/members\";\nimport Protection from \"@/pages/protection\";\nimport ActivityLogs from \"@/pages/activity-logs\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Overview} />\n      <Route path=\"/controls\" component={BotControls} />\n      <Route path=\"/configuration\" component={Configuration} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route path=\"/members\" component={Members} />\n      <Route path=\"/protection\" component={Protection} />\n      <Route path=\"/logs\" component={ActivityLogs} />\n      <Route component={Overview} />\n    </Switch>\n  );\n}\n\nexport default function App() {\n  const style = {\n    \"--sidebar-width\": \"280px\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <ThemeProvider>\n          <SidebarProvider style={style as React.CSSProperties}>\n            <div className=\"flex h-screen w-full\">\n              <AppSidebar />\n              <div className=\"flex flex-col flex-1 overflow-hidden\">\n                <TopBar />\n                <main className=\"flex-1 overflow-auto p-6\">\n                  <Router />\n                </main>\n              </div>\n            </div>\n          </SidebarProvider>\n          <Toaster />\n        </ThemeProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":2045},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 220 18% 20%;\n\n  --border: 220 13% 91%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 220 18% 20%;\n\n  --card-border: 220 13% 94%;\n\n  --sidebar: 220 15% 96%;\n\n  --sidebar-foreground: 220 18% 20%;\n\n  --sidebar-border: 220 13% 91%;\n\n  --sidebar-primary: 220 90% 56%;\n\n  --sidebar-primary-foreground: 220 90% 98%;\n\n  --sidebar-accent: 220 15% 92%;\n\n  --sidebar-accent-foreground: 220 18% 20%;\n\n  --sidebar-ring: 220 90% 56%;\n\n  --popover: 220 15% 94%;\n\n  --popover-foreground: 220 18% 20%;\n\n  --popover-border: 220 13% 88%;\n\n  --primary: 220 90% 56%;\n\n  --primary-foreground: 220 90% 98%;\n\n  --secondary: 220 15% 92%;\n\n  --secondary-foreground: 220 18% 20%;\n\n  --muted: 220 15% 94%;\n\n  --muted-foreground: 220 9% 46%;\n\n  --accent: 220 15% 93%;\n\n  --accent-foreground: 220 18% 20%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 84% 98%;\n\n  --input: 220 13% 82%;\n  --ring: 220 90% 56%;\n  --chart-1: 220 85% 45%;\n  --chart-2: 142 76% 36%;\n  --chart-3: 38 92% 40%;\n  --chart-4: 199 89% 38%;\n  --chart-5: 280 70% 45%;\n\n  --font-sans: Inter, system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Courier New', Menlo, monospace;\n  --radius: .5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 13% 20% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 13% 20% / 0.10);\n  --shadow-sm: 0px 2px 4px -1px hsl(220 13% 20% / 0.06), 0px 1px 2px -1px hsl(220 13% 20% / 0.10);\n  --shadow: 0px 4px 6px -1px hsl(220 13% 20% / 0.10), 0px 2px 4px -1px hsl(220 13% 20% / 0.06);\n  --shadow-md: 0px 6px 12px -2px hsl(220 13% 20% / 0.12), 0px 3px 6px -1px hsl(220 13% 20% / 0.08);\n  --shadow-lg: 0px 10px 20px -3px hsl(220 13% 20% / 0.15), 0px 4px 8px -2px hsl(220 13% 20% / 0.10);\n  --shadow-xl: 0px 20px 30px -5px hsl(220 13% 20% / 0.18), 0px 8px 16px -3px hsl(220 13% 20% / 0.12);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 13% 20% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 18% 12%;\n\n  --foreground: 220 15% 95%;\n\n  --border: 220 10% 25%;\n\n  --card: 220 15% 16%;\n\n  --card-foreground: 220 15% 95%;\n\n  --card-border: 220 10% 22%;\n\n  --sidebar: 220 18% 20%;\n\n  --sidebar-foreground: 220 15% 95%;\n\n  --sidebar-border: 220 10% 25%;\n\n  --sidebar-primary: 220 90% 60%;\n\n  --sidebar-primary-foreground: 220 90% 98%;\n\n  --sidebar-accent: 220 18% 24%;\n\n  --sidebar-accent-foreground: 220 15% 95%;\n\n  --sidebar-ring: 220 90% 60%;\n\n  --popover: 220 15% 18%;\n\n  --popover-foreground: 220 15% 95%;\n\n  --popover-border: 220 10% 24%;\n\n  --primary: 220 90% 60%;\n\n  --primary-foreground: 220 90% 98%;\n\n  --secondary: 220 18% 22%;\n\n  --secondary-foreground: 220 15% 95%;\n\n  --muted: 220 15% 20%;\n\n  --muted-foreground: 220 8% 65%;\n\n  --accent: 220 15% 22%;\n\n  --accent-foreground: 220 15% 95%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 84% 98%;\n\n  --input: 220 10% 35%;\n  --ring: 220 90% 60%;\n  --chart-1: 220 85% 65%;\n  --chart-2: 142 76% 55%;\n  --chart-3: 38 92% 60%;\n  --chart-4: 199 89% 58%;\n  --chart-5: 280 70% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 18% 5% / 0.30);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 18% 5% / 0.40);\n  --shadow-sm: 0px 2px 4px -1px hsl(220 18% 5% / 0.35), 0px 1px 2px -1px hsl(220 18% 5% / 0.40);\n  --shadow: 0px 4px 6px -1px hsl(220 18% 5% / 0.40), 0px 2px 4px -1px hsl(220 18% 5% / 0.35);\n  --shadow-md: 0px 6px 12px -2px hsl(220 18% 5% / 0.45), 0px 3px 6px -1px hsl(220 18% 5% / 0.40);\n  --shadow-lg: 0px 10px 20px -3px hsl(220 18% 5% / 0.50), 0px 4px 8px -2px hsl(220 18% 5% / 0.45);\n  --shadow-xl: 0px 20px 30px -5px hsl(220 18% 5% / 0.55), 0px 8px 16px -3px hsl(220 18% 5% / 0.50);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 18% 5% / 0.65);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9908},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/app-sidebar.tsx":{"content":"import { Home, Gamepad2, Settings, Sliders, Users, Shield, Terminal } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n  useSidebar,\n} from \"@/components/ui/sidebar\";\n\nconst menuItems = [\n  { title: \"Overview\", url: \"/\", icon: Home },\n  { title: \"Bot Controls\", url: \"/controls\", icon: Gamepad2 },\n  { title: \"Configuration\", url: \"/configuration\", icon: Settings },\n  { title: \"Settings\", url: \"/settings\", icon: Sliders },\n  { title: \"Members\", url: \"/members\", icon: Users },\n  { title: \"Protection\", url: \"/protection\", icon: Shield },\n  { title: \"Activity Logs\", url: \"/logs\", icon: Terminal },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n  const { setOpenMobile, isMobile } = useSidebar();\n\n  const handleNavClick = () => {\n    if (isMobile) {\n      setOpenMobile(false);\n    }\n  };\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"border-b border-sidebar-border p-4\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex h-10 w-10 items-center justify-center rounded-md bg-primary text-primary-foreground\">\n            <Gamepad2 className=\"h-6 w-6\" />\n          </div>\n          <div>\n            <h2 className=\"text-base font-semibold\">RexSquad Bot</h2>\n            <p className=\"text-xs text-muted-foreground\">Manager</p>\n          </div>\n        </div>\n      </SidebarHeader>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild isActive={location === item.url} data-testid={`nav-${item.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                    <Link href={item.url} onClick={handleNavClick}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}\n","size_bytes":2362},"client/src/components/stat-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  iconColor?: string;\n}\n\nexport function StatCard({ title, value, icon: Icon, iconColor = \"bg-primary\" }: StatCardProps) {\n  return (\n    <Card data-testid={`stat-card-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <CardContent className=\"p-6\">\n        <div className={`flex h-12 w-12 items-center justify-center rounded-lg ${iconColor} mb-4`}>\n          <Icon className=\"h-6 w-6 text-white\" />\n        </div>\n        <div className=\"text-3xl font-bold text-foreground\" data-testid={`stat-value-${title.toLowerCase().replace(/\\s+/g, '-')}`}>{value}</div>\n        <div className=\"text-sm text-muted-foreground mt-1\">{title}</div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":866},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState | undefined>(\n  undefined\n);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(\"theme\") as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme,\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};\n","size_bytes":1163},"client/src/components/top-bar.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { useTheme } from \"@/components/theme-provider\";\n\nexport function TopBar() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <header className=\"sticky top-0 z-50 flex h-16 items-center justify-between border-b bg-background px-4 gap-4\">\n      <div className=\"flex items-center gap-2\">\n        <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n      </div>\n      <div className=\"flex items-center gap-3\">\n        <div className=\"flex items-center gap-2 rounded-md bg-green-100 dark:bg-green-900/30 px-3 py-1.5\" data-testid=\"status-indicator\">\n          <div className=\"h-2 w-2 rounded-full bg-green-500 animate-pulse\" />\n          <span className=\"text-sm font-medium text-green-700 dark:text-green-400\">Bot Running</span>\n        </div>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n          data-testid=\"button-theme-toggle\"\n        >\n          <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1418},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/activity-logs.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function ActivityLogs() {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\" data-testid=\"heading-logs\">Activity Logs</h1>\n        <p className=\"text-muted-foreground mt-1\">Real-time bot activity and events</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-2\">\n            <AlertCircle className=\"h-5 w-5 text-amber-500\" />\n            <CardTitle>Backend Implementation Required</CardTitle>\n          </div>\n          <CardDescription>\n            Activity logging API endpoints need to be implemented.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-muted-foreground\">\n            Required backend features:\n          </p>\n          <ul className=\"mt-2 space-y-1 text-sm text-muted-foreground list-disc list-inside\">\n            <li>GET /api/logs - Fetch activity logs</li>\n            <li>GET /api/logs/recent - Fetch recent activity (paginated)</li>\n            <li>WebSocket /ws/logs - Real-time log streaming</li>\n          </ul>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1307},"client/src/pages/bot-controls.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Play, Square, RotateCw, Trash2, Activity } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface BotStatus {\n  isRunning: boolean;\n  lastStarted: string | null;\n  lastStopped: string | null;\n  cacheCleared: string | null;\n  uptime: number;\n}\n\ninterface BotStatusResponse {\n  success: boolean;\n  data: BotStatus;\n}\n\nexport default function BotControls() {\n  const { toast } = useToast();\n\n  const { data, isLoading, isError } = useQuery<BotStatusResponse>({\n    queryKey: [\"/api/bot/status\"],\n    refetchInterval: 5000,\n  });\n\n  const startMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/bot/start\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bot/status\"] });\n      toast({\n        title: \"Bot Started\",\n        description: \"The bot has been started successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to start bot\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const stopMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/bot/stop\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bot/status\"] });\n      toast({\n        title: \"Bot Stopped\",\n        description: \"The bot has been stopped successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to stop bot\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const restartMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/bot/restart\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bot/status\"] });\n      toast({\n        title: \"Bot Restarted\",\n        description: \"The bot has been restarted successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to restart bot\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const clearCacheMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/bot/clear-cache\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bot/status\"] });\n      toast({\n        title: \"Cache Cleared\",\n        description: \"Bot cache has been cleared successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to clear cache\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-bot-controls\">Bot Controls</h1>\n          <p className=\"text-muted-foreground mt-1\">Manage bot operations</p>\n        </div>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-muted-foreground\">Loading bot status...</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isError) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-bot-controls\">Bot Controls</h1>\n          <p className=\"text-muted-foreground mt-1\">Manage bot operations</p>\n        </div>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-destructive\">Failed to load bot status. Please try again.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const botStatus = data?.data;\n  const isRunning = botStatus?.isRunning;\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\" data-testid=\"heading-bot-controls\">Bot Controls</h1>\n        <p className=\"text-muted-foreground mt-1\">Manage bot operations</p>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <Activity className=\"h-5 w-5\" />\n                <CardTitle>Bot Status</CardTitle>\n              </div>\n              <Badge\n                variant={isRunning ? \"default\" : \"secondary\"}\n                data-testid=\"badge-bot-status\"\n              >\n                {isRunning ? \"Running\" : \"Stopped\"}\n              </Badge>\n            </div>\n            <CardDescription>Current operational status</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              {botStatus?.lastStarted && (\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Last Started:</span>\n                  <span data-testid=\"text-last-started\">\n                    {formatDistanceToNow(new Date(botStatus.lastStarted), { addSuffix: true })}\n                  </span>\n                </div>\n              )}\n              {botStatus?.lastStopped && (\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Last Stopped:</span>\n                  <span data-testid=\"text-last-stopped\">\n                    {formatDistanceToNow(new Date(botStatus.lastStopped), { addSuffix: true })}\n                  </span>\n                </div>\n              )}\n              {botStatus?.cacheCleared && (\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Cache Cleared:</span>\n                  <span data-testid=\"text-cache-cleared\">\n                    {formatDistanceToNow(new Date(botStatus.cacheCleared), { addSuffix: true })}\n                  </span>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Control Panel</CardTitle>\n            <CardDescription>Start, stop, or manage the bot</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 gap-3\">\n              <Button\n                onClick={() => startMutation.mutate()}\n                disabled={isRunning || startMutation.isPending}\n                className=\"w-full\"\n                data-testid=\"button-start-bot\"\n              >\n                <Play className=\"mr-2 h-4 w-4\" />\n                Start\n              </Button>\n              <Button\n                onClick={() => stopMutation.mutate()}\n                disabled={!isRunning || stopMutation.isPending}\n                variant=\"destructive\"\n                className=\"w-full\"\n                data-testid=\"button-stop-bot\"\n              >\n                <Square className=\"mr-2 h-4 w-4\" />\n                Stop\n              </Button>\n              <Button\n                onClick={() => restartMutation.mutate()}\n                disabled={restartMutation.isPending}\n                variant=\"secondary\"\n                className=\"w-full\"\n                data-testid=\"button-restart-bot\"\n              >\n                <RotateCw className=\"mr-2 h-4 w-4\" />\n                Restart\n              </Button>\n              <Button\n                onClick={() => clearCacheMutation.mutate()}\n                disabled={clearCacheMutation.isPending}\n                variant=\"outline\"\n                className=\"w-full\"\n                data-testid=\"button-clear-cache\"\n              >\n                <Trash2 className=\"mr-2 h-4 w-4\" />\n                Clear Cache\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>About Bot Controls</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-2 text-sm text-muted-foreground\">\n          <p>\n            <strong>Start:</strong> Activates the bot and begins monitoring chat activity.\n          </p>\n          <p>\n            <strong>Stop:</strong> Deactivates the bot temporarily. All settings are preserved.\n          </p>\n          <p>\n            <strong>Restart:</strong> Stops and immediately restarts the bot. Useful for applying configuration changes.\n          </p>\n          <p>\n            <strong>Clear Cache:</strong> Clears temporary data and cache. The bot will rebuild its cache automatically.\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8993},"client/src/pages/configuration.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Save } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\n\nconst botConfigSchema = z.object({\n  botName: z.string().min(1, \"Bot name is required\").max(50, \"Bot name too long\"),\n  botTone: z.enum([\"upbeat\", \"sarcastic\", \"wise\", \"energetic\", \"chill\", \"phuppo\", \"gangster\", \"party\"]),\n  welcomeMessage: z.string().min(1, \"Welcome message is required\").max(200, \"Welcome message too long\"),\n});\n\ntype BotConfig = z.infer<typeof botConfigSchema>;\n\ninterface BotConfigResponse {\n  success: boolean;\n  data: BotConfig & {\n    createdAt?: string;\n    updatedAt?: string;\n  };\n}\n\nexport default function Configuration() {\n  const { toast } = useToast();\n\n  const { data, isLoading, isError } = useQuery<BotConfigResponse>({\n    queryKey: [\"/api/config/bot\"],\n  });\n\n  const form = useForm<BotConfig>({\n    resolver: zodResolver(botConfigSchema),\n    defaultValues: {\n      botName: data?.data.botName || \"\",\n      botTone: data?.data.botTone || \"upbeat\",\n      welcomeMessage: data?.data.welcomeMessage || \"\",\n    },\n    values: data?.data ? {\n      botName: data.data.botName,\n      botTone: data.data.botTone,\n      welcomeMessage: data.data.welcomeMessage,\n    } : undefined,\n  });\n\n  const saveMutation = useMutation({\n    mutationFn: async (values: BotConfig) => {\n      return await apiRequest(\"PUT\", \"/api/config/bot\", values);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/config/bot\"] });\n      toast({\n        title: \"Success\",\n        description: \"Bot configuration saved successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save configuration\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (values: BotConfig) => {\n    saveMutation.mutate(values);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-configuration\">Configuration</h1>\n          <p className=\"text-muted-foreground mt-1\">Configure bot settings and behavior</p>\n        </div>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-muted-foreground\">Loading configuration...</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isError) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-configuration\">Configuration</h1>\n          <p className=\"text-muted-foreground mt-1\">Configure bot settings and behavior</p>\n        </div>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-destructive\">Failed to load configuration. Please try again.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\" data-testid=\"heading-configuration\">Configuration</h1>\n        <p className=\"text-muted-foreground mt-1\">Configure bot settings and behavior</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Bot Settings</CardTitle>\n          <CardDescription>Configure bot name and personality</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"botName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Bot Name</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"RexBot\"\n                        {...field}\n                        data-testid=\"input-bot-name\"\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      The name of your bot\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"botTone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Bot Tone</FormLabel>\n                    <Select\n                      onValueChange={field.onChange}\n                      defaultValue={field.value}\n                      value={field.value}\n                    >\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-bot-tone\">\n                          <SelectValue placeholder=\"Select a tone\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"upbeat\">Upbeat</SelectItem>\n                        <SelectItem value=\"sarcastic\">Sarcastic</SelectItem>\n                        <SelectItem value=\"wise\">Wise</SelectItem>\n                        <SelectItem value=\"energetic\">Energetic</SelectItem>\n                        <SelectItem value=\"chill\">Chill</SelectItem>\n                        <SelectItem value=\"phuppo\">Phuppo</SelectItem>\n                        <SelectItem value=\"gangster\">Gangster</SelectItem>\n                        <SelectItem value=\"party\">Party</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormDescription>\n                      The personality style of your bot\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"welcomeMessage\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Welcome Message</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"✨️˚.⭒Wᴇʟᴄᴏᴍᴇ {name}˚✨️\"\n                        {...field}\n                        data-testid=\"input-welcome-message\"\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Use {\"{name}\"} to insert the user's name\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                disabled={saveMutation.isPending}\n                data-testid=\"button-save-config\"\n              >\n                <Save className=\"mr-2 h-4 w-4\" />\n                {saveMutation.isPending ? \"Saving...\" : \"Save Configuration\"}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7537},"client/src/pages/members.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Trash2, Search, Users, TrendingUp, TrendingDown } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\n\ninterface Member {\n  UID: string;\n  NM: string;\n  LVL: number;\n}\n\ninterface MembersResponse {\n  success: boolean;\n  data: {\n    members: Member[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n    levelStats: {\n      total: number;\n      lowLevel: number;\n      mediumLevel: number;\n      highLevel: number;\n    };\n  };\n}\n\nexport default function Members() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [bulkLevel, setBulkLevel] = useState(\"\");\n  const [bulkCount, setBulkCount] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data, isLoading, isError } = useQuery<MembersResponse>({\n    queryKey: [\"/api/members\"],\n  });\n\n  const removeMemberMutation = useMutation({\n    mutationFn: async (uid: string) => {\n      return await apiRequest(\"DELETE\", `/api/members/${uid}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/members\"] });\n      toast({\n        title: \"Success\",\n        description: \"Member removed successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const bulkRemoveMutation = useMutation({\n    mutationFn: async (data: { level: number; count: number }) => {\n      return await apiRequest(\"POST\", \"/api/members/bulk-remove\", data);\n    },\n    onSuccess: (response: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/members\"] });\n      toast({\n        title: \"Success\",\n        description: response.message || \"Members removed successfully\",\n      });\n      setBulkLevel(\"\");\n      setBulkCount(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove members\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRemoveMember = (uid: string, name: string) => {\n    if (window.confirm(`Are you sure you want to remove ${name}?`)) {\n      removeMemberMutation.mutate(uid);\n    }\n  };\n\n  const handleBulkRemove = (e: React.FormEvent) => {\n    e.preventDefault();\n    const level = parseInt(bulkLevel);\n    const count = parseInt(bulkCount);\n\n    if (isNaN(level) || isNaN(count) || level < 1 || count < 1) {\n      toast({\n        title: \"Invalid Input\",\n        description: \"Please enter valid level and count\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (window.confirm(`Remove ${count} members at level ${level}?`)) {\n      bulkRemoveMutation.mutate({ level, count });\n    }\n  };\n\n  const filteredMembers = data?.data.members.filter((member) =>\n    member.NM.toLowerCase().includes(searchQuery.toLowerCase())\n  ) || [];\n\n  const stats = data?.data.levelStats;\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map((n) => n[0])\n      .join(\"\")\n      .toUpperCase();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-members\">Members</h1>\n          <p className=\"text-muted-foreground mt-1\">Manage club members</p>\n        </div>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-muted-foreground\">Loading members...</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isError) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-members\">Members</h1>\n          <p className=\"text-muted-foreground mt-1\">Manage club members</p>\n        </div>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-destructive\">Failed to load members. Please try again.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\" data-testid=\"heading-members\">Members</h1>\n        <p className=\"text-muted-foreground mt-1\">Manage club members</p>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Level 1-4</CardTitle>\n            <TrendingDown className=\"h-4 w-4 text-amber-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"stat-low-level\">{stats?.lowLevel || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">Low level members</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Level 5-9</CardTitle>\n            <Users className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"stat-medium-level\">{stats?.mediumLevel || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">Medium level members</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Level 10+</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"stat-high-level\">{stats?.highLevel || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">High level members</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Bulk Member Removal</CardTitle>\n          <CardDescription>Remove multiple members by level</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleBulkRemove} className=\"flex gap-4\">\n            <Input\n              type=\"number\"\n              placeholder=\"Level (e.g., 5)\"\n              value={bulkLevel}\n              onChange={(e) => setBulkLevel(e.target.value)}\n              min=\"1\"\n              max=\"100\"\n              data-testid=\"input-bulk-level\"\n            />\n            <Input\n              type=\"number\"\n              placeholder=\"Count (e.g., 10)\"\n              value={bulkCount}\n              onChange={(e) => setBulkCount(e.target.value)}\n              min=\"1\"\n              max=\"100\"\n              data-testid=\"input-bulk-count\"\n            />\n            <Button\n              type=\"submit\"\n              variant=\"destructive\"\n              disabled={bulkRemoveMutation.isPending}\n              data-testid=\"button-bulk-remove\"\n            >\n              <Trash2 className=\"mr-2 h-4 w-4\" />\n              {bulkRemoveMutation.isPending ? \"Removing...\" : \"Remove\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Club Members</CardTitle>\n          <CardDescription>\n            <span data-testid=\"text-member-count\">{filteredMembers.length}</span> members found\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search members...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-members\"\n            />\n          </div>\n\n          <div className=\"space-y-3\">\n            {filteredMembers.length === 0 ? (\n              <p className=\"text-center text-muted-foreground py-8\">No members found</p>\n            ) : (\n              filteredMembers.map((member) => (\n                <div\n                  key={member.UID}\n                  className=\"flex items-center justify-between p-4 border rounded-lg hover-elevate\"\n                  data-testid={`card-member-${member.UID}`}\n                >\n                  <div className=\"flex items-center gap-4\">\n                    <Avatar>\n                      <AvatarFallback>{getInitials(member.NM)}</AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <h3 className=\"font-semibold\" data-testid={`text-member-name-${member.UID}`}>\n                        {member.NM}\n                      </h3>\n                      <Badge\n                        variant={member.LVL >= 10 ? \"default\" : \"secondary\"}\n                        data-testid={`badge-level-${member.UID}`}\n                      >\n                        Level {member.LVL}\n                      </Badge>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => handleRemoveMember(member.UID, member.NM)}\n                    disabled={removeMemberMutation.isPending}\n                    data-testid={`button-remove-${member.UID}`}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              ))\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9978},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/overview.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Users, Shield, Activity, Bot } from \"lucide-react\";\n\ninterface MembersResponse {\n  success: boolean;\n  data: {\n    members: any[];\n    total: number;\n    levelStats: {\n      total: number;\n      lowLevel: number;\n      mediumLevel: number;\n      highLevel: number;\n    };\n  };\n}\n\ninterface ProtectionResponse {\n  success: boolean;\n  data: string[];\n}\n\ninterface BotStatusResponse {\n  success: boolean;\n  data: {\n    connected: boolean;\n    message: string;\n  };\n}\n\nexport default function Overview() {\n  const { data: membersData } = useQuery<MembersResponse>({\n    queryKey: [\"/api/members\"],\n  });\n\n  const { data: spamWordsData } = useQuery<ProtectionResponse>({\n    queryKey: [\"/api/protection/spam-words\"],\n  });\n\n  const { data: botStatus } = useQuery<BotStatusResponse>({\n    queryKey: [\"/api/bot/status\"],\n  });\n\n  const totalMembers = membersData?.data?.total || 0;\n  const spamWordCount = spamWordsData?.data?.length || 0;\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\" data-testid=\"heading-dashboard\">Dashboard Overview</h1>\n        <p className=\"text-muted-foreground mt-1\">Monitor your bot and club statistics</p>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Members</CardTitle>\n            <Users className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"stat-total-members\">{totalMembers}</div>\n            <p className=\"text-xs text-muted-foreground\">Club members</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Messages Today</CardTitle>\n            <Activity className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">0</div>\n            <p className=\"text-xs text-muted-foreground\">Bot activity</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Spam Words</CardTitle>\n            <Shield className=\"h-4 w-4 text-amber-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"stat-spam-words\">{spamWordCount}</div>\n            <p className=\"text-xs text-muted-foreground\">Protected terms</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Bot Status</CardTitle>\n            <Bot className=\"h-4 w-4 text-cyan-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {botStatus?.data?.connected ? \"Online\" : \"Ready\"}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">System status</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Club Information</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Club Name</p>\n              <p className=\"font-semibold\" data-testid=\"text-club-name\">REX SQUAD</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Club Code</p>\n              <p className=\"font-semibold\" data-testid=\"text-club-code\">3029915</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Member Distribution</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-sm text-muted-foreground\">Level 1-4</span>\n              <span className=\"font-semibold\" data-testid=\"stat-overview-low\">\n                {membersData?.data?.levelStats?.lowLevel || 0}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-sm text-muted-foreground\">Level 5-9</span>\n              <span className=\"font-semibold\" data-testid=\"stat-overview-medium\">\n                {membersData?.data?.levelStats?.mediumLevel || 0}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-sm text-muted-foreground\">Level 10+</span>\n              <span className=\"font-semibold\" data-testid=\"stat-overview-high\">\n                {membersData?.data?.levelStats?.highLevel || 0}\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5264},"client/src/pages/protection.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Save, Shield } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\n\ninterface ProtectionData {\n  success: boolean;\n  data: string[];\n}\n\nexport default function Protection() {\n  const { toast } = useToast();\n\n  const { data: spamWordsData, isLoading: spamLoading, isError: spamError } = useQuery<ProtectionData>({\n    queryKey: [\"/api/protection/spam-words\"],\n  });\n\n  const { data: bannedPatternsData, isLoading: patternsLoading, isError: patternsError } = useQuery<ProtectionData>({\n    queryKey: [\"/api/protection/banned-patterns\"],\n  });\n\n  const { data: adminsData, isLoading: adminsLoading, isError: adminsError } = useQuery<ProtectionData>({\n    queryKey: [\"/api/protection/admins\"],\n  });\n\n  const [spamWords, setSpamWords] = useState(\"\");\n  const [bannedPatterns, setBannedPatterns] = useState(\"\");\n  const [admins, setAdmins] = useState(\"\");\n\n  useEffect(() => {\n    if (spamWordsData?.data) {\n      setSpamWords(spamWordsData.data.join(\"\\n\"));\n    }\n  }, [spamWordsData]);\n\n  useEffect(() => {\n    if (bannedPatternsData?.data) {\n      setBannedPatterns(bannedPatternsData.data.join(\", \"));\n    }\n  }, [bannedPatternsData]);\n\n  useEffect(() => {\n    if (adminsData?.data) {\n      setAdmins(adminsData.data.join(\", \"));\n    }\n  }, [adminsData]);\n\n  const saveSpamWordsMutation = useMutation({\n    mutationFn: async (words: string[]) => {\n      return await apiRequest(\"PUT\", \"/api/protection/spam-words\", { words });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/protection/spam-words\"] });\n      toast({\n        title: \"Success\",\n        description: \"Spam words saved successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save spam words\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const saveBannedPatternsMutation = useMutation({\n    mutationFn: async (patterns: string[]) => {\n      return await apiRequest(\"PUT\", \"/api/protection/banned-patterns\", { patterns });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/protection/banned-patterns\"] });\n      toast({\n        title: \"Success\",\n        description: \"Banned patterns saved successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save banned patterns\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const saveAdminsMutation = useMutation({\n    mutationFn: async (adminList: string[]) => {\n      return await apiRequest(\"PUT\", \"/api/protection/admins\", { admins: adminList });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/protection/admins\"] });\n      toast({\n        title: \"Success\",\n        description: \"Admins saved successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save admins\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveSpamWords = (e: React.FormEvent) => {\n    e.preventDefault();\n    const words = spamWords\n      .split(\"\\n\")\n      .map((w) => w.trim())\n      .filter((w) => w !== \"\");\n    saveSpamWordsMutation.mutate(words);\n  };\n\n  const handleSaveBannedPatterns = (e: React.FormEvent) => {\n    e.preventDefault();\n    const patterns = bannedPatterns\n      .split(\",\")\n      .map((p) => p.trim())\n      .filter((p) => p !== \"\");\n    saveBannedPatternsMutation.mutate(patterns);\n  };\n\n  const handleSaveAdmins = (e: React.FormEvent) => {\n    e.preventDefault();\n    const adminList = admins\n      .split(\",\")\n      .map((a) => a.trim())\n      .filter((a) => a !== \"\");\n    saveAdminsMutation.mutate(adminList);\n  };\n\n  const spamWordCount = spamWords\n    .split(\"\\n\")\n    .filter((w) => w.trim() !== \"\").length;\n\n  if (spamLoading || patternsLoading || adminsLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-protection\">Protection</h1>\n          <p className=\"text-muted-foreground mt-1\">Manage spam filters and security settings</p>\n        </div>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-muted-foreground\">Loading protection settings...</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (spamError || patternsError || adminsError) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-protection\">Protection</h1>\n          <p className=\"text-muted-foreground mt-1\">Manage spam filters and security settings</p>\n        </div>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-destructive\">Failed to load protection settings. Please try again.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\" data-testid=\"heading-protection\">Protection</h1>\n        <p className=\"text-muted-foreground mt-1\">Manage spam filters and security settings</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-2\">\n            <Shield className=\"h-5 w-5\" />\n            <CardTitle>Spam Words</CardTitle>\n          </div>\n          <CardDescription>\n            One word per line (supports thousands of words)\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSaveSpamWords} className=\"space-y-4\">\n            <div>\n              <Textarea\n                placeholder=\"Enter spam words, one per line...\"\n                value={spamWords}\n                onChange={(e) => setSpamWords(e.target.value)}\n                className=\"min-h-[200px] font-mono\"\n                data-testid=\"textarea-spam-words\"\n              />\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                <span data-testid=\"text-spam-word-count\">{spamWordCount}</span> words configured\n              </p>\n            </div>\n            <Button\n              type=\"submit\"\n              disabled={saveSpamWordsMutation.isPending}\n              data-testid=\"button-save-spam-words\"\n            >\n              <Save className=\"mr-2 h-4 w-4\" />\n              {saveSpamWordsMutation.isPending ? \"Saving...\" : \"Save Spam Words\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Banned Patterns</CardTitle>\n          <CardDescription>\n            URL patterns to block (comma-separated)\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSaveBannedPatterns} className=\"space-y-4\">\n            <Textarea\n              placeholder=\"http://, bit.ly, discord.gg\"\n              value={bannedPatterns}\n              onChange={(e) => setBannedPatterns(e.target.value)}\n              className=\"min-h-[100px]\"\n              data-testid=\"textarea-banned-patterns\"\n            />\n            <Button\n              type=\"submit\"\n              disabled={saveBannedPatternsMutation.isPending}\n              data-testid=\"button-save-patterns\"\n            >\n              <Save className=\"mr-2 h-4 w-4\" />\n              {saveBannedPatternsMutation.isPending ? \"Saving...\" : \"Save Patterns\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Administrators</CardTitle>\n          <CardDescription>\n            Admin usernames (comma-separated)\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSaveAdmins} className=\"space-y-4\">\n            <Textarea\n              placeholder=\"Admin1, Admin2, Admin3\"\n              value={admins}\n              onChange={(e) => setAdmins(e.target.value)}\n              className=\"min-h-[100px]\"\n              data-testid=\"textarea-admins\"\n            />\n            <Button\n              type=\"submit\"\n              disabled={saveAdminsMutation.isPending}\n              data-testid=\"button-save-admins\"\n            >\n              <Save className=\"mr-2 h-4 w-4\" />\n              {saveAdminsMutation.isPending ? \"Saving...\" : \"Save Admins\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8931},"client/src/pages/settings.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Save } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\n\nconst settingsSchema = z.object({\n  allowAvatars: z.boolean(),\n  allowGuestIds: z.boolean(),\n  banLevel: z.coerce.number().min(1).max(100),\n});\n\ntype Settings = z.infer<typeof settingsSchema>;\n\ninterface SettingsResponse {\n  success: boolean;\n  data: Settings & {\n    createdAt?: string;\n    updatedAt?: string;\n  };\n}\n\nexport default function Settings() {\n  const { toast } = useToast();\n\n  const { data, isLoading, isError } = useQuery<SettingsResponse>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const form = useForm<Settings>({\n    resolver: zodResolver(settingsSchema),\n    defaultValues: {\n      allowAvatars: data?.data.allowAvatars ?? true,\n      allowGuestIds: data?.data.allowGuestIds ?? false,\n      banLevel: data?.data.banLevel ?? 10,\n    },\n    values: data?.data ? {\n      allowAvatars: data.data.allowAvatars,\n      allowGuestIds: data.data.allowGuestIds,\n      banLevel: data.data.banLevel,\n    } : undefined,\n  });\n\n  const saveMutation = useMutation({\n    mutationFn: async (values: Settings) => {\n      return await apiRequest(\"PUT\", \"/api/settings\", values);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n      toast({\n        title: \"Success\",\n        description: \"Settings saved successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (values: Settings) => {\n    saveMutation.mutate(values);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-settings\">Settings</h1>\n          <p className=\"text-muted-foreground mt-1\">Configure club and moderation settings</p>\n        </div>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-muted-foreground\">Loading settings...</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isError) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-settings\">Settings</h1>\n          <p className=\"text-muted-foreground mt-1\">Configure club and moderation settings</p>\n        </div>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-destructive\">Failed to load settings. Please try again.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\" data-testid=\"heading-settings\">Settings</h1>\n        <p className=\"text-muted-foreground mt-1\">Configure club and moderation settings</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Club Settings</CardTitle>\n          <CardDescription>Manage club permissions and restrictions</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"allowAvatars\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"checkbox-allow-avatars\"\n                      />\n                    </FormControl>\n                    <div className=\"space-y-1 leading-none\">\n                      <FormLabel>Allow Avatars</FormLabel>\n                      <FormDescription>\n                        Enable or disable avatar display for members\n                      </FormDescription>\n                    </div>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"allowGuestIds\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"checkbox-allow-guest-ids\"\n                      />\n                    </FormControl>\n                    <div className=\"space-y-1 leading-none\">\n                      <FormLabel>Allow Guest IDs</FormLabel>\n                      <FormDescription>\n                        Permit guest accounts to join the club\n                      </FormDescription>\n                    </div>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"banLevel\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Auto-Ban Level Threshold</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        min={1}\n                        max={100}\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value))}\n                        data-testid=\"input-ban-level\"\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Members below this level will be auto-banned\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                disabled={saveMutation.isPending}\n                data-testid=\"button-save-settings\"\n              >\n                <Save className=\"mr-2 h-4 w-4\" />\n                {saveMutation.isPending ? \"Saving...\" : \"Save Settings\"}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6843},"client/src/components/examples/app-sidebar.tsx":{"content":"import { AppSidebar } from \"../app-sidebar\";\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\n\nexport default function AppSidebarExample() {\n  return (\n    <SidebarProvider>\n      <AppSidebar />\n    </SidebarProvider>\n  );\n}\n","size_bytes":235},"client/src/components/examples/stat-card.tsx":{"content":"import { StatCard } from \"../stat-card\";\nimport { Users } from \"lucide-react\";\n\nexport default function StatCardExample() {\n  return (\n    <div className=\"p-4\">\n      <StatCard title=\"Total Members\" value=\"156\" icon={Users} iconColor=\"bg-blue-500\" />\n    </div>\n  );\n}\n","size_bytes":269},"client/src/components/examples/top-bar.tsx":{"content":"import { TopBar } from \"../top-bar\";\nimport { ThemeProvider } from \"../theme-provider\";\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\n\nexport default function TopBarExample() {\n  return (\n    <ThemeProvider>\n      <SidebarProvider>\n        <TopBar />\n      </SidebarProvider>\n    </ThemeProvider>\n  );\n}\n","size_bytes":317},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/examples/activity-logs.tsx":{"content":"import ActivityLogs from \"../activity-logs\";\n\nexport default function ActivityLogsExample() {\n  return <ActivityLogs />;\n}\n","size_bytes":123},"client/src/pages/examples/bot-controls.tsx":{"content":"import BotControls from \"../bot-controls\";\n\nexport default function BotControlsExample() {\n  return <BotControls />;\n}\n","size_bytes":119},"client/src/pages/examples/configuration.tsx":{"content":"import Configuration from \"../configuration\";\n\nexport default function ConfigurationExample() {\n  return <Configuration />;\n}\n","size_bytes":126},"client/src/pages/examples/members.tsx":{"content":"import Members from \"../members\";\n\nexport default function MembersExample() {\n  return <Members />;\n}\n","size_bytes":102},"client/src/pages/examples/overview.tsx":{"content":"import Overview from \"../overview\";\n\nexport default function OverviewExample() {\n  return <Overview />;\n}\n","size_bytes":106},"client/src/pages/examples/protection.tsx":{"content":"import Protection from \"../protection\";\n\nexport default function ProtectionExample() {\n  return <Protection />;\n}\n","size_bytes":114},"client/src/pages/examples/settings.tsx":{"content":"import Settings from \"../settings\";\n\nexport default function SettingsExample() {\n  return <Settings />;\n}\n","size_bytes":106},"replit.md":{"content":"# RexSquad Bot Manager\n\n## Overview\n\nRexSquad Bot Manager is a comprehensive web-based dashboard for managing a chat bot system. The application provides administrators with tools to configure bot behavior, manage club members, implement content protection, and monitor bot activity in real-time. Built as a full-stack TypeScript application, it features a modern React frontend with a Node.js/Express backend, utilizing file-based storage for configuration and member data.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Updates (October 5, 2025)\n\n### Bot Integration Enhancement\n- **New Bot API Endpoints**: Added comprehensive `/api/jack/*` endpoints for enhanced bot functionality\n- **OpenAI Integration**: Integrated OpenAI GPT-3.5-turbo for intelligent chat responses\n- **WebSocket Support**: Prepared WebSocket infrastructure for live bot connection\n- **Environment Configuration**: Added `.env` file support for bot credentials (CLUB_CODE, BOT_UID, EP, KEY, OPENAI_API_KEY)\n- **Dual API Structure**: Both `/api/*` (dashboard) and `/api/jack/*` (bot) endpoints now available\n\n### Bot Capabilities\n- **Member Management**: Advanced member operations with bulk actions\n- **Chat Integration**: OpenAI-powered conversational responses with customizable tone\n- **Protection Features**: Spam detection, banned pattern filtering, admin management\n- **Configuration**: Dynamic bot personality (name, tone, welcome messages)\n- **Real-time Stats**: Bot connection status, message processing, moderation stats\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Tooling**\n- React 18 with TypeScript for type-safe component development\n- Vite as the build tool and development server for fast hot module replacement\n- Wouter for lightweight client-side routing\n- TanStack Query (React Query) for server state management and caching\n\n**UI Component System**\n- Radix UI primitives for accessible, headless components\n- shadcn/ui component library with custom theming (New York style variant)\n- Tailwind CSS for utility-first styling with custom design tokens\n- Material Design 3 principles adapted for dashboard-optimized patterns\n\n**Design System**\n- Custom color palette supporting light/dark themes via CSS variables\n- Inter font family for consistent typography\n- Responsive layout using CSS Grid and Flexbox\n- Component variants managed through class-variance-authority (CVA)\n\n**State Management Strategy**\n- React Query for API data fetching, caching, and synchronization\n- React Hook Form with Zod validation for form state and validation\n- Local component state for UI-specific interactions\n- Theme context for dark/light mode persistence\n\n### Backend Architecture\n\n**Server Framework**\n- Express.js for RESTful API endpoints\n- TypeScript for type safety across the stack\n- File-based routing pattern in `server/routes.ts`\n- Custom Vite integration for development mode with HMR\n\n**Data Storage Strategy**\n- File-based storage using JSON and text files in the `/data` directory\n- No database required - all configuration persisted to disk\n- Asynchronous file operations using `fs/promises`\n- Structured data files:\n  - `club_members.json` - Member roster with UID, name, and level\n  - `settings.json` - Bot configuration settings\n  - `bot_configuration.json` - Bot personality and messaging\n  - `spam.txt` - Line-separated spam word list\n  - `banned_patterns.txt` - Comma-separated banned URL patterns\n  - `admins.txt` - Comma-separated admin list\n\n**API Design Pattern**\n- RESTful endpoints following resource-based URL structure\n- Consistent response format: `{ success: boolean, data: any }`\n- Error handling middleware for unified error responses\n- CORS enabled for development workflow\n\n**Key API Endpoints**\n- `/api/members` - Member CRUD operations with pagination\n- `/api/settings` - Bot settings management\n- `/api/config/bot` - Bot personality configuration\n- `/api/protection/*` - Content filtering lists (spam-words, banned-patterns, admins)\n- `/api/bot/status` - Bot operational status (placeholder for future WebSocket integration)\n\n### External Dependencies\n\n**UI Component Libraries**\n- @radix-ui/* - Comprehensive suite of accessible UI primitives (accordion, dialog, dropdown, select, etc.)\n- lucide-react - Icon library for consistent visual elements\n- react-day-picker - Calendar/date selection component\n\n**Form & Validation**\n- react-hook-form - Performant form state management\n- @hookform/resolvers - Integration layer for validation schemas\n- zod - TypeScript-first schema validation\n- drizzle-zod - Integration between Drizzle ORM and Zod (prepared for future database migration)\n\n**Data Fetching & State**\n- @tanstack/react-query - Asynchronous state management\n- axios - HTTP client (available but fetch API primarily used)\n\n**Styling & Theming**\n- tailwindcss - Utility-first CSS framework\n- class-variance-authority - Type-safe component variant management\n- clsx & tailwind-merge - Conditional className utilities\n\n**Build & Development Tools**\n- vite - Next-generation build tool\n- @vitejs/plugin-react - React support for Vite\n- esbuild - Fast JavaScript bundler for production server build\n- tsx - TypeScript execution for development server\n\n**Database Preparation (Not Yet Active)**\n- drizzle-orm - TypeScript ORM (schema defined but not connected)\n- @neondatabase/serverless - Serverless PostgreSQL driver\n- drizzle-kit - Schema migration toolkit\n- Note: Drizzle schema exists in `shared/schema.ts` but file-based storage currently in use\n\n**Session Management (Available)**\n- express-session - Session middleware (imported but not implemented)\n- connect-pg-simple - PostgreSQL session store (for future use)\n\n**Replit Integration**\n- @replit/vite-plugin-runtime-error-modal - Development error overlay\n- @replit/vite-plugin-cartographer - Replit-specific tooling\n- @replit/vite-plugin-dev-banner - Development environment indicator\n\n### Architectural Decisions\n\n**File-Based Storage vs. Database**\n- Problem: Need persistent configuration and member data\n- Solution: JSON/text file storage in `/data` directory\n- Rationale: Simpler deployment, no database provisioning required, sufficient for admin panel use case\n- Trade-off: Limited scalability but adequate for current requirements\n- Future Path: Drizzle ORM schema prepared for migration to PostgreSQL when scale demands it\n\n**Monorepo Structure**\n- Problem: Share types between frontend and backend\n- Solution: `/shared` directory for common schemas and types\n- Rationale: Type safety across client-server boundary, single source of truth\n- Implementation: TypeScript path aliases (@shared/*) for clean imports\n\n**Component Library Choice**\n- Problem: Need accessible, customizable UI components\n- Solution: Radix UI primitives + shadcn/ui patterns\n- Rationale: Unstyled primitives allow full design control while maintaining accessibility\n- Benefit: Tailwind-based styling enables rapid customization without CSS-in-JS overhead\n\n**State Management Architecture**\n- Problem: Balance between local state and server state\n- Solution: React Query for server data, local state for UI concerns\n- Rationale: Automatic caching, background refetching, and optimistic updates\n- Alternative Considered: Redux (rejected due to complexity overhead for this use case)\n\n**Theme Implementation**\n- Problem: Support light/dark modes with complex color systems\n- Solution: CSS variables with Tailwind integration\n- Rationale: Dynamic theming without JavaScript re-renders, better performance\n- Implementation: HSL color space for programmatic manipulation of shades\n\n**Development Workflow**\n- Problem: Fast iteration during development\n- Solution: Vite with custom Express integration\n- Rationale: HMR for frontend, nodemon-like restart for backend changes\n- Implementation: Vite middleware mode with separate server process in development","size_bytes":7876},"server/bot-integration.ts":{"content":"import type { Express } from 'express';\nimport { promises as fs } from 'fs';\nimport * as http from 'http';\nimport * as crypto from 'crypto';\nimport * as path from 'path';\nimport axios from 'axios';\nimport { OpenAI } from 'openai';\nimport * as dotenv from 'dotenv';\nimport WebSocket from 'ws';\n\n// Load environment variables\ndotenv.config();\n\n// Configuration\nconst club_code = process.env.CLUB_CODE || 'default';\nconst club_name = process.env.CLUB_NAME || 'Default Club';\nconst my_uid = process.env.BOT_UID || '';\nconst bot_ep = process.env.EP || '';\nconst bot_key = process.env.KEY || '';\n\n// File paths\nconst DATA_DIR = path.join(process.cwd(), 'data');\nconst MEMBERS_FILE = path.join(DATA_DIR, 'club_members.json');\nconst SETTINGS_FILE = path.join(DATA_DIR, 'settings.json');\nconst USERS_FILE = path.join(DATA_DIR, 'users.json');\nconst SPAM_FILE = path.join(DATA_DIR, 'spam.txt');\nconst ADMINS_FILE = path.join(DATA_DIR, 'admins.txt');\nconst BANNED_PATTERNS_FILE = path.join(DATA_DIR, 'banned_patterns.txt');\nconst BOT_CONFIG_FILE = path.join(DATA_DIR, 'bot_configuration.json');\n\n// Bot state\nlet botState = {\n  connected: false,\n  connecting: false,\n  socket: null as WebSocket | null,\n  clubCode: club_code,\n  clubName: club_name,\n  startTime: null as number | null,\n  stats: {\n    messagesProcessed: 0,\n    usersKicked: 0,\n    spamBlocked: 0\n  }\n};\n\n// Bot configuration\nlet botConfig = {\n  admins: [] as string[],\n  spamWords: [] as string[],\n  bannedPatterns: [] as string[],\n  settings: null as any,\n  botConfiguration: null as any\n};\n\n// Game state\nlet secretNumber = Math.floor(Math.random() * 100) + 1;\nlet botMic = 0;\nlet index_idx = 1;\nlet sequence = 2;\nlet mics = new Array(10).fill(null);\nlet onMic = false;\nlet savedData: any = {};\nlet club_members: any[] = [];\nlet messageBuffer = '';\nlet typeWord: string | false = false;\nlet messageStorage = '';\nlet clubAdmins: string[] = [];\nlet pendingRemovals: string[] = [];\nlet bannedUserIds: string[] = [];\nlet check_ban_list = false;\n\n// OpenAI\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY || ''\n});\n\n// Conversation history for OpenAI\nconst conversationHistory = new Map();\n\n// Logger\nconst logger = {\n  info: (message: string) => console.log(`[BOT] ${message}`),\n  error: (message: string) => console.error(`[BOT] ${message}`),\n  warn: (message: string) => console.warn(`[BOT] ${message}`)\n};\n\n// ==========================================\n// HELPER FUNCTIONS\n// ==========================================\n\nasync function loadSettings() {\n  try {\n    const data = await fs.readFile(SETTINGS_FILE, 'utf8');\n    return JSON.parse(data);\n  } catch (error: any) {\n    if (error.code === 'ENOENT') {\n      const defaults = {\n        allowAvatars: true,\n        banLevel: 10,\n        allowGuestIds: false,\n        createdAt: new Date().toISOString()\n      };\n      await fs.writeFile(SETTINGS_FILE, JSON.stringify(defaults, null, 2));\n      return defaults;\n    }\n    throw error;\n  }\n}\n\nasync function loadConfigFromFile(type: string) {\n  try {\n    let filePath = '';\n    if (type === 'settings') filePath = SETTINGS_FILE;\n    else if (type === 'bot-config') filePath = BOT_CONFIG_FILE;\n    else if (type === 'admins') filePath = ADMINS_FILE;\n    else if (type === 'spam-words') filePath = SPAM_FILE;\n    else if (type === 'banned-patterns') filePath = BANNED_PATTERNS_FILE;\n    else return null;\n\n    const data = await fs.readFile(filePath, 'utf8');\n    \n    if (type === 'settings' || type === 'bot-config') {\n      return JSON.parse(data);\n    } else {\n      if (type === 'spam-words') {\n        return data.split('\\n').filter(line => line.trim() !== '');\n      } else {\n        return data.split(',').map(item => item.trim()).filter(item => item !== '');\n      }\n    }\n  } catch (error: any) {\n    if (error.code === 'ENOENT') {\n      logger.warn(`Config file not found: ${type}`);\n      return null;\n    }\n    logger.error(`Error loading config ${type}: ${error.message}`);\n    return null;\n  }\n}\n\nasync function loadAllConfigurations() {\n  try {\n    const settings = await loadConfigFromFile('settings');\n    if (settings) {\n      botConfig.settings = settings;\n      logger.info(`⚙️ Settings loaded: Avatars: ${settings.allowAvatars}, Ban Level: ${settings.banLevel}`);\n    } else {\n      botConfig.settings = {\n        allowAvatars: true,\n        banLevel: 10,\n        allowGuestIds: false\n      };\n    }\n\n    const botConfiguration = await loadConfigFromFile('bot-config');\n    if (botConfiguration) {\n      botConfig.botConfiguration = botConfiguration;\n      logger.info(`🤖 Bot config: ${botConfiguration.botName} (${botConfiguration.botTone})`);\n    } else {\n      botConfig.botConfiguration = {\n        botName: 'Elijah',\n        botTone: 'upbeat',\n        welcomeMessage: '✨️˚.⭒Wᴇʟᴄᴏᴍᴇ {name}˚✨️'\n      };\n    }\n\n    const admins = await loadConfigFromFile('admins');\n    if (admins) {\n      botConfig.admins = admins;\n      clubAdmins = admins;\n      logger.info(`👥 ${admins.length} admins loaded`);\n    }\n\n    const spamWords = await loadConfigFromFile('spam-words');\n    if (spamWords) {\n      botConfig.spamWords = spamWords;\n      logger.info(`🚫 ${spamWords.length} spam words loaded`);\n    }\n\n    const bannedPatterns = await loadConfigFromFile('banned-patterns');\n    if (bannedPatterns) {\n      botConfig.bannedPatterns = bannedPatterns;\n      logger.info(`⛔ ${bannedPatterns.length} banned patterns loaded`);\n    }\n  } catch (error: any) {\n    logger.error(`Error loading configurations: ${error.message}`);\n  }\n}\n\nasync function saveClubMembers(members: any) {\n  try {\n    if (members !== undefined) {\n      const jsonString = JSON.stringify(members, null, 2);\n      await fs.writeFile(MEMBERS_FILE, jsonString, 'utf8');\n      club_members = members;\n      logger.info(`✅ ${members.length} club members saved`);\n    }\n  } catch (error) {\n    logger.error('Error saving club members');\n  }\n}\n\nfunction formatWelcomeMessage(userName: string) {\n  const welcomeTemplate = botConfig.botConfiguration?.welcomeMessage || '✨️˚.⭒Wᴇʟᴄᴏᴍᴇ {name}˚✨️';\n  return welcomeTemplate.replace('{name}', userName);\n}\n\nasync function loadSavedData(filePath: string) {\n  try {\n    await fs.access(filePath);\n    const rawData = await fs.readFile(filePath, 'utf8');\n    savedData = JSON.parse(rawData);\n    logger.info('📁 User data loaded');\n  } catch (error: any) {\n    if (error.code === 'ENOENT') {\n      logger.info('📁 Starting with empty user data');\n      savedData = {};\n    } else {\n      savedData = {};\n    }\n  }\n}\n\nasync function saveData(data: any, filePath: string) {\n  try {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2));\n  } catch (error) {\n    logger.error('Error saving data');\n  }\n}\n\nfunction findPlayerID(UID: string) {\n  for (const GC in savedData) {\n    if (savedData[GC].UID === UID) {\n      return GC;\n    }\n  }\n  return null;\n}\n\nfunction findPlayerName(UID: string) {\n  for (const GC in savedData) {\n    if (savedData[GC].UID === UID) {\n      return savedData[GC].NM;\n    }\n  }\n  return 'Unknown';\n}\n\nfunction checkAvatar(number: number) {\n  return number.toString().startsWith('1000');\n}\n\n// ==========================================\n// OPENAI FUNCTIONS\n// ==========================================\n\nfunction gptTone(user_id: string) {\n  const tones: any = {\n    upbeat: \"You are an upbeat and friendly assistant. Be positive and encouraging!\",\n    sarcastic: \"You are a witty and sarcastic assistant. Use humor and sass in your responses!\",\n    wise: \"You are a wise and thoughtful assistant. Provide deep insights and wisdom.\",\n    energetic: \"You are an energetic and enthusiastic assistant. Show excitement in every response!\",\n    chill: \"You are a chill and relaxed assistant. Keep things cool and casual.\",\n    phuppo: \"You are a phuppo (aunt) character. Be caring but slightly nosy and gossipy.\",\n    gangster: \"You are a gangster character. Talk tough and street-smart.\",\n    party: \"You are a party animal. Everything is fun and exciting!\"\n  };\n  \n  const tone = botConfig.botConfiguration?.botTone || 'upbeat';\n  return tones[tone] || tones.upbeat;\n}\n\nfunction removeBotName(message: string) {\n  const botName = botConfig.botConfiguration?.botName || 'Elijah';\n  return message.replace(new RegExp(botName, 'gi'), '').trim();\n}\n\nfunction splitMessage(text: string, maxLength: number = 150) {\n  const words = text.split(' ');\n  const chunks: string[] = [];\n  let currentChunk = '';\n\n  for (const word of words) {\n    if ((currentChunk + word).length > maxLength) {\n      if (currentChunk.trim()) {\n        chunks.push(currentChunk.trim());\n      }\n      currentChunk = word + ' ';\n    } else {\n      currentChunk += word + ' ';\n    }\n  }\n\n  if (currentChunk.trim()) {\n    chunks.push(currentChunk.trim());\n  }\n\n  return chunks;\n}\n\nasync function getResponse(message: string, user_id: string) {\n  try {\n    if (!conversationHistory.has(user_id)) {\n      conversationHistory.set(user_id, [\n        { role: \"system\", content: gptTone(user_id) }\n      ]);\n    }\n\n    const history = conversationHistory.get(user_id);\n    history.push({ role: \"user\", content: message });\n\n    const recentHistory = history.slice(-11);\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo\",\n      messages: recentHistory,\n      max_tokens: 200,\n      temperature: 0.8,\n    });\n\n    const reply = response.choices?.[0]?.message?.content?.trim() || \"Sorry, I didn't catch that.\";\n    history.push({ role: \"assistant\", content: reply });\n\n    return reply;\n  } catch (error) {\n    logger.error(\"Error fetching ChatGPT response\");\n    return \"Sorry, I couldn't process that.\";\n  }\n}\n\n// ==========================================\n// WEBSOCKET FUNCTIONS\n// ==========================================\n\nfunction sendMessage(TC: string) {\n  if (!botState.socket || botState.socket.readyState !== WebSocket.OPEN) {\n    logger.warn('Cannot send message - socket not connected');\n    return;\n  }\n\n  const message = {\n    TC: \"msg\",\n    PY: {\n      RLT: 'global',\n      _T: Date.now() + sequence,\n      msg: TC,\n      TM: Date.now()\n    }\n  };\n  botState.socket.send(JSON.stringify(message));\n  sequence += 1;\n}\n\nfunction kickUser(uid: string, reason: string = '') {\n  if (!botState.socket || botState.socket.readyState !== WebSocket.OPEN) return;\n\n  const message = {\n    TC: \"kk\",\n    PY: {\n      RLT: 'admin',\n      _T: Date.now() + sequence,\n      UID: uid,\n      BY: my_uid,\n      RS: reason,\n      TM: Date.now()\n    }\n  };\n  botState.socket.send(JSON.stringify(message));\n  botState.stats.usersKicked++;\n  sequence += 1;\n  logger.info(`⚠️ Kicked user: ${uid} (${reason})`);\n}\n\nfunction takeMic() {\n  if (!botState.socket || botState.socket.readyState !== WebSocket.OPEN) return;\n\n  const message = {\n    TC: \"bwm\",\n    PY: {\n      RLT: 'mic',\n      _T: Date.now() + sequence,\n      UID: my_uid,\n      BS: 1,\n      MS: 0,\n      TM: Date.now()\n    }\n  };\n  botState.socket.send(JSON.stringify(message));\n  onMic = true;\n  sequence += 1;\n}\n\nfunction leaveMic() {\n  if (!botState.socket || botState.socket.readyState !== WebSocket.OPEN) return;\n\n  const message = {\n    TC: \"bwm\",\n    PY: {\n      RLT: 'mic',\n      _T: Date.now() + sequence,\n      UID: my_uid,\n      BS: 2,\n      MS: 0,\n      TM: Date.now()\n    }\n  };\n  botState.socket.send(JSON.stringify(message));\n  onMic = false;\n  sequence += 1;\n}\n\nfunction changeName(newName: string) {\n  if (!botState.socket || botState.socket.readyState !== WebSocket.OPEN) return;\n\n  const message = {\n    TC: \"un\",\n    PY: {\n      RLT: 'user',\n      _T: Date.now() + sequence,\n      NM: newName,\n      TM: Date.now()\n    }\n  };\n  botState.socket.send(JSON.stringify(message));\n  sequence += 1;\n}\n\nfunction inviteMember(uid: string) {\n  if (!botState.socket || botState.socket.readyState !== WebSocket.OPEN) return;\n\n  const message = {\n    TC: \"iv\",\n    PY: {\n      RLT: 'admin',\n      _T: Date.now() + sequence,\n      UID: uid,\n      TM: Date.now()\n    }\n  };\n  botState.socket.send(JSON.stringify(message));\n  sequence += 1;\n}\n\nfunction joinMic(micIndex: number) {\n  if (!botState.socket || botState.socket.readyState !== WebSocket.OPEN) return;\n\n  const message = {\n    TC: \"jm\",\n    PY: {\n      RLT: 'mic',\n      _T: Date.now() + sequence,\n      MI: micIndex,\n      TM: Date.now()\n    }\n  };\n  botState.socket.send(JSON.stringify(message));\n  botMic = micIndex;\n  sequence += 1;\n}\n\nasync function handleMessage(data: string) {\n  try {\n    const jsonMessage = JSON.parse(data);\n    botState.stats.messagesProcessed++;\n\n    // Handle member list\n    if (jsonMessage?.PY?.ML !== undefined) {\n      await saveClubMembers(jsonMessage.PY.ML);\n    }\n\n    // Handle new member joining\n    if (jsonMessage?.TC === \"nmu\" && jsonMessage?.PY?.NM) {\n      const userName = jsonMessage.PY.NM;\n      const userUID = jsonMessage.PY.UID;\n      \n      // Check if avatar allowed\n      if (!botConfig.settings?.allowAvatars && checkAvatar(jsonMessage.PY.AVI)) {\n        kickUser(userUID, 'Avatars not allowed');\n        return;\n      }\n\n      // Welcome message\n      const welcomeMsg = formatWelcomeMessage(userName);\n      sendMessage(welcomeMsg);\n    }\n\n    // Handle chat messages\n    if (jsonMessage?.TC === \"msg\" && jsonMessage?.PY?.msg) {\n      const message = jsonMessage.PY.msg;\n      const senderUID = jsonMessage.PY.UID;\n      const senderName = jsonMessage.PY.NM || 'User';\n\n      // Don't respond to own messages\n      if (senderUID === my_uid) return;\n\n      // Check spam\n      const lowerMsg = message.toLowerCase();\n      for (const spamWord of botConfig.spamWords) {\n        if (lowerMsg.includes(spamWord.toLowerCase())) {\n          kickUser(senderUID, 'Spam detected');\n          botState.stats.spamBlocked++;\n          logger.info(`🚫 Spam blocked from ${senderName}: ${spamWord}`);\n          return;\n        }\n      }\n\n      // Check banned patterns\n      for (const pattern of botConfig.bannedPatterns) {\n        if (lowerMsg.includes(pattern.toLowerCase())) {\n          kickUser(senderUID, 'Banned content');\n          logger.info(`⛔ Banned pattern from ${senderName}: ${pattern}`);\n          return;\n        }\n      }\n\n      // Handle commands\n      await handleChatCommand(message, senderUID, senderName);\n    }\n\n    // Handle mic updates\n    if (jsonMessage?.TC === \"mu\" && jsonMessage?.PY?.MU) {\n      mics = jsonMessage.PY.MU;\n    }\n\n  } catch (error) {\n    logger.error('Error handling message');\n  }\n}\n\nasync function handleChatCommand(message: string, uid: string, name: string) {\n  const msg = message.trim();\n  const isAdmin = clubAdmins.includes(uid);\n  const botName = botConfig.botConfiguration?.botName || 'Elijah';\n\n  // AI Chat (mention bot name)\n  if (msg.toLowerCase().includes(botName.toLowerCase())) {\n    const cleanedMessage = removeBotName(msg);\n    const response = await getResponse(cleanedMessage, uid);\n    const chunks = splitMessage(response);\n    \n    for (const chunk of chunks) {\n      sendMessage(chunk);\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n    return;\n  }\n\n  // Admin commands\n  if (!isAdmin && msg.startsWith('/')) {\n    sendMessage('⛔ Admin-only command');\n    return;\n  }\n\n  // /mic - Take mic\n  if (msg === '/mic') {\n    takeMic();\n    sendMessage('🎤 Taking mic...');\n  }\n  \n  // /lm - Leave mic\n  else if (msg === '/lm' || msg === '/leave') {\n    leaveMic();\n    sendMessage('👋 Leaving mic...');\n  }\n  \n  // /say <message>\n  else if (msg.startsWith('/say ')) {\n    const textToSay = msg.substring(5);\n    sendMessage(textToSay);\n  }\n  \n  // /spam <word> - Add spam word\n  else if (msg.startsWith('/spam ')) {\n    const word = msg.substring(6).trim();\n    botConfig.spamWords.push(word);\n    await fs.appendFile(SPAM_FILE, `${word}\\n`);\n    sendMessage(`✅ Added spam word: ${word}`);\n  }\n  \n  // /whois <name> - Find user info\n  else if (msg.startsWith('/whois ')) {\n    const searchName = msg.substring(7).trim().toLowerCase();\n    const found = club_members.find((m: any) => \n      m.NM.toLowerCase().includes(searchName)\n    );\n    if (found) {\n      sendMessage(`👤 ${found.NM} - Level ${found.LVL} - UID: ${found.UID}`);\n    } else {\n      sendMessage('❌ User not found');\n    }\n  }\n  \n  // /kick <uid> - Kick user\n  else if (msg.startsWith('/kick ')) {\n    const targetUID = msg.substring(6).trim();\n    kickUser(targetUID, 'Kicked by admin');\n    sendMessage(`⚠️ Kicked user: ${targetUID}`);\n  }\n  \n  // /cn <name> - Change bot name\n  else if (msg.startsWith('/cn ')) {\n    const newName = msg.substring(4).trim();\n    changeName(newName);\n    sendMessage(`✅ Name changed to: ${newName}`);\n  }\n  \n  // /iv <uid> - Invite member\n  else if (msg.startsWith('/iv ')) {\n    const targetUID = msg.substring(4).trim();\n    inviteMember(targetUID);\n    sendMessage(`📨 Invited: ${targetUID}`);\n  }\n  \n  // /joinMic <index> - Join specific mic\n  else if (msg.startsWith('/joinMic ')) {\n    const micIndex = parseInt(msg.substring(9));\n    if (!isNaN(micIndex) && micIndex >= 0 && micIndex < 10) {\n      joinMic(micIndex);\n      sendMessage(`🎤 Joining mic ${micIndex}...`);\n    } else {\n      sendMessage('❌ Invalid mic index (0-9)');\n    }\n  }\n  \n  // /rejoin - Rejoin club\n  else if (msg === '/rejoin') {\n    sendMessage('🔄 Rejoining club...');\n    setTimeout(() => connectToClub(), 2000);\n  }\n  \n  // /stats - Show bot stats\n  else if (msg === '/stats') {\n    const uptime = botState.startTime ? Math.floor((Date.now() - botState.startTime) / 1000) : 0;\n    sendMessage(`📊 Messages: ${botState.stats.messagesProcessed} | Kicks: ${botState.stats.usersKicked} | Spam: ${botState.stats.spamBlocked} | Uptime: ${uptime}s`);\n  }\n  \n  // /members - Show member count\n  else if (msg === '/members') {\n    sendMessage(`👥 ${club_members.length} members in club`);\n  }\n  \n  // /guess <number> - Guess the number game\n  else if (msg.startsWith('/guess ')) {\n    const guess = parseInt(msg.substring(7));\n    if (isNaN(guess)) {\n      sendMessage('❌ Invalid number');\n    } else if (guess === secretNumber) {\n      sendMessage(`🎉 ${name} guessed it! The number was ${secretNumber}!`);\n      secretNumber = Math.floor(Math.random() * 100) + 1;\n    } else if (guess < secretNumber) {\n      sendMessage('📈 Higher!');\n    } else {\n      sendMessage('📉 Lower!');\n    }\n  }\n  \n  // /type - Start typing challenge\n  else if (msg === '/type') {\n    const words = ['javascript', 'typescript', 'nodejs', 'express', 'websocket', 'replit'];\n    typeWord = words[Math.floor(Math.random() * words.length)];\n    sendMessage(`⌨️ Type this word: ${typeWord}`);\n  }\n  \n  // Check if typing correct word\n  else if (typeWord && msg.toLowerCase() === typeWord) {\n    sendMessage(`✅ ${name} typed it correctly!`);\n    typeWord = false;\n  }\n  \n  // /help - Show commands\n  else if (msg === '/help') {\n    sendMessage('🤖 Commands: /mic /lm /say /spam /whois /kick /cn /iv /joinMic /rejoin /stats /members /guess /type /help');\n  }\n}\n\n// ==========================================\n// WEBSOCKET CONNECTION\n// ==========================================\n\nfunction connectToClub() {\n  if (botState.connecting || botState.connected) {\n    logger.warn('Already connecting or connected');\n    return;\n  }\n\n  if (!my_uid || !bot_ep || !bot_key) {\n    logger.error('Missing bot credentials (BOT_UID, EP, KEY)');\n    return;\n  }\n\n  botState.connecting = true;\n  logger.info(`🔌 Connecting to club: ${club_name} (${club_code})...`);\n\n  const url = `wss://ws.ls.superkinglabs.com/?EIO=4&transport=websocket`;\n  const ws = new WebSocket(url);\n\n  ws.on('open', () => {\n    logger.info('✅ WebSocket connected');\n    \n    // Send initial connection\n    ws.send('2probe');\n    ws.send('3');\n\n    // Authenticate\n    const authMessage = {\n      TC: \"auth\",\n      PY: {\n        UID: my_uid,\n        EP: bot_ep,\n        KEY: bot_key,\n        CL: club_code,\n        TM: Date.now()\n      }\n    };\n    ws.send(`42${JSON.stringify(['CLUB_STATE_IN', authMessage])}`);\n    \n    botState.socket = ws;\n    botState.connected = true;\n    botState.connecting = false;\n    botState.startTime = Date.now();\n    \n    logger.info(`🎉 Bot connected to ${club_name}!`);\n  });\n\n  ws.on('message', async (data: WebSocket.Data) => {\n    const message = data.toString();\n    \n    // Heartbeat\n    if (message === '2') {\n      ws.send('3');\n      return;\n    }\n\n    // Handle club messages\n    if (message.startsWith('42')) {\n      try {\n        const jsonStr = message.substring(2);\n        const parsed = JSON.parse(jsonStr);\n        if (parsed && parsed[1]) {\n          await handleMessage(JSON.stringify(parsed[1]));\n        }\n      } catch (e) {\n        // Ignore parse errors\n      }\n    }\n  });\n\n  ws.on('error', (error) => {\n    logger.error(`WebSocket error: ${error.message}`);\n    botState.connected = false;\n    botState.connecting = false;\n  });\n\n  ws.on('close', () => {\n    logger.warn('🔌 WebSocket disconnected');\n    botState.connected = false;\n    botState.connecting = false;\n    botState.socket = null;\n    \n    // Reconnect after 5 seconds\n    setTimeout(() => {\n      logger.info('🔄 Reconnecting...');\n      connectToClub();\n    }, 5000);\n  });\n}\n\n// ==========================================\n// INITIALIZATION\n// ==========================================\n\nasync function initializeBot() {\n  try {\n    await loadAllConfigurations();\n    await loadSavedData(USERS_FILE);\n    logger.info('✅ Bot initialized successfully');\n    \n    // Auto-connect if credentials available\n    if (my_uid && bot_ep && bot_key && club_code) {\n      setTimeout(() => connectToClub(), 2000);\n    } else {\n      logger.warn('⚠️ Bot credentials not configured - WebSocket disabled');\n    }\n  } catch (error) {\n    logger.error('Error initializing bot');\n  }\n}\n\n// ==========================================\n// EXPRESS API ENDPOINTS\n// ==========================================\n\nexport function setupBotIntegration(app: Express) {\n  \n  // ====================\n  // JACK API ENDPOINTS\n  // ====================\n\n  // Get members with pagination\n  app.get('/api/jack/members', async (req, res) => {\n    try {\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 10;\n\n      if (page < 1 || limit < 1 || limit > 100) {\n        return res.json({\n          success: false,\n          message: 'Invalid pagination parameters'\n        });\n      }\n\n      const data = await fs.readFile(MEMBERS_FILE, 'utf8');\n      const allMembers = JSON.parse(data);\n\n      const levelStats = {\n        total: allMembers.length,\n        highLevel: allMembers.filter((m: any) => m.LVL >= 10).length,\n        mediumLevel: allMembers.filter((m: any) => m.LVL >= 5 && m.LVL <= 9).length,\n        lowLevel: allMembers.filter((m: any) => m.LVL >= 1 && m.LVL <= 4).length\n      };\n\n      const startIndex = (page - 1) * limit;\n      const endIndex = startIndex + limit;\n      const paginatedMembers = allMembers.slice(startIndex, endIndex);\n\n      res.json({\n        success: true,\n        data: {\n          members: paginatedMembers,\n          total: allMembers.length,\n          page: page,\n          limit: limit,\n          totalPages: Math.ceil(allMembers.length / limit),\n          levelStats: levelStats\n        }\n      });\n    } catch (error) {\n      res.json({ success: false, message: 'Failed to load members' });\n    }\n  });\n\n  // Remove member\n  app.delete('/api/jack/members/:uid', async (req, res) => {\n    try {\n      const { uid } = req.params;\n      const data = await fs.readFile(MEMBERS_FILE, 'utf8');\n      const allMembers = JSON.parse(data);\n\n      const memberIndex = allMembers.findIndex((m: any) => m.UID === uid);\n      if (memberIndex === -1) {\n        return res.json({ success: false, message: 'Member not found' });\n      }\n\n      const removed = allMembers.splice(memberIndex, 1)[0];\n      await fs.writeFile(MEMBERS_FILE, JSON.stringify(allMembers, null, 2));\n      \n      pendingRemovals.push(uid);\n      \n      // Kick from club if connected\n      if (botState.connected) {\n        kickUser(uid, 'Removed by admin');\n      }\n      \n      logger.info(`🗑️ Member removed: ${removed.NM}`);\n\n      res.json({\n        success: true,\n        message: `Member ${removed.NM} removed successfully`,\n        removedMember: removed\n      });\n    } catch (error) {\n      res.json({ success: false, message: 'Failed to remove member' });\n    }\n  });\n\n  // Bulk remove members\n  app.post('/api/jack/members/bulk-remove', async (req, res) => {\n    try {\n      const { level, count } = req.body;\n\n      if (typeof level !== 'number' || typeof count !== 'number') {\n        return res.json({ success: false, message: 'Invalid parameters' });\n      }\n\n      const data = await fs.readFile(MEMBERS_FILE, 'utf8');\n      const allMembers = JSON.parse(data);\n      const membersAtLevel = allMembers.filter((m: any) => m.LVL === level);\n\n      if (membersAtLevel.length === 0) {\n        return res.json({ success: false, message: `No members at level ${level}` });\n      }\n\n      const removeCount = Math.min(count, membersAtLevel.length);\n      const membersToRemove = membersAtLevel.slice(0, removeCount);\n      const uidsToRemove = membersToRemove.map((m: any) => m.UID);\n\n      const updated = allMembers.filter((m: any) => !uidsToRemove.includes(m.UID));\n      await fs.writeFile(MEMBERS_FILE, JSON.stringify(updated, null, 2));\n\n      pendingRemovals.push(...uidsToRemove);\n      \n      // Kick all if connected\n      if (botState.connected) {\n        for (const uid of uidsToRemove) {\n          kickUser(uid, 'Bulk removal');\n          await new Promise(resolve => setTimeout(resolve, 100));\n        }\n      }\n      \n      logger.info(`🗑️ Bulk removed ${removeCount} members at level ${level}`);\n\n      res.json({\n        success: true,\n        message: `Removed ${removeCount} members at level ${level}`,\n        removedCount: removeCount\n      });\n    } catch (error) {\n      res.json({ success: false, message: 'Failed to bulk remove' });\n    }\n  });\n\n  // Load bot configuration\n  app.get('/api/jack/bot-config', async (req, res) => {\n    try {\n      const data = await fs.readFile(BOT_CONFIG_FILE, 'utf8');\n      const config = JSON.parse(data);\n      botConfig.botConfiguration = config;\n      res.json({ success: true, data: config });\n    } catch (error: any) {\n      if (error.code === 'ENOENT') {\n        const defaultConfig = {\n          botName: 'Elijah',\n          botTone: 'upbeat',\n          welcomeMessage: '✨️˚.⭒Wᴇʟᴄᴏᴍᴇ {name}˚✨️',\n          createdAt: new Date().toISOString()\n        };\n        await fs.writeFile(BOT_CONFIG_FILE, JSON.stringify(defaultConfig, null, 2));\n        res.json({ success: true, data: defaultConfig });\n      } else {\n        res.json({ success: false, message: 'Failed to load config' });\n      }\n    }\n  });\n\n  // Save bot configuration\n  app.post('/api/jack/bot-config', async (req, res) => {\n    try {\n      const { botName, botTone, welcomeMessage } = req.body;\n\n      if (!botName || !botTone || !welcomeMessage) {\n        return res.json({ success: false, message: 'Invalid bot configuration' });\n      }\n\n      const validTones = ['upbeat', 'sarcastic', 'wise', 'energetic', 'chill', 'phuppo', 'gangster', 'party'];\n      if (!validTones.includes(botTone)) {\n        return res.json({ success: false, message: 'Invalid bot tone' });\n      }\n\n      const config = {\n        botName: botName.trim(),\n        botTone,\n        welcomeMessage: welcomeMessage.trim(),\n        updatedAt: new Date().toISOString()\n      };\n\n      await fs.writeFile(BOT_CONFIG_FILE, JSON.stringify(config, null, 2));\n      botConfig.botConfiguration = config;\n      conversationHistory.clear();\n\n      logger.info(`Bot configuration updated: ${botName} (${botTone})`);\n      res.json({ success: true, message: 'Bot configuration saved' });\n    } catch (error) {\n      res.json({ success: false, message: 'Failed to save config' });\n    }\n  });\n\n  // Load settings\n  app.get('/api/jack/settings', async (req, res) => {\n    try {\n      const settings = await loadSettings();\n      res.json({ success: true, data: settings });\n    } catch (error) {\n      res.json({ success: false, message: 'Failed to load settings' });\n    }\n  });\n\n  // Save settings\n  app.post('/api/jack/settings', async (req, res) => {\n    try {\n      const { allowAvatars, banLevel, allowGuestIds } = req.body;\n\n      if (typeof allowAvatars !== 'boolean' ||\n          typeof allowGuestIds !== 'boolean' ||\n          typeof banLevel !== 'number' ||\n          banLevel < 1 || banLevel > 100) {\n        return res.json({ success: false, message: 'Invalid settings data' });\n      }\n\n      const settings = {\n        allowAvatars,\n        banLevel,\n        allowGuestIds,\n        updatedAt: new Date().toISOString()\n      };\n\n      await fs.writeFile(SETTINGS_FILE, JSON.stringify(settings, null, 2));\n      botConfig.settings = settings;\n\n      logger.info(`Settings updated: Avatars: ${allowAvatars}, Ban Level: ${banLevel}`);\n      res.json({ success: true, message: 'Settings saved successfully' });\n    } catch (error) {\n      res.json({ success: false, message: 'Failed to save settings' });\n    }\n  });\n\n  // Load configuration (admins, spam-words, banned-patterns)\n  app.get('/api/jack/config/:type', async (req, res) => {\n    try {\n      const { type } = req.params;\n      const fileMap: any = {\n        'admins': ADMINS_FILE,\n        'spam-words': SPAM_FILE,\n        'banned-patterns': BANNED_PATTERNS_FILE\n      };\n\n      const filePath = fileMap[type];\n      if (!filePath) {\n        return res.json({ success: false, message: 'Invalid config type' });\n      }\n\n      const data = await fs.readFile(filePath, 'utf8');\n      let parsedData;\n\n      if (type === 'spam-words') {\n        parsedData = data.split('\\n').filter(line => line.trim() !== '');\n      } else {\n        parsedData = data.split(',').map(item => item.trim()).filter(item => item !== '');\n      }\n\n      res.json({ success: true, data: parsedData });\n    } catch (error: any) {\n      if (error.code === 'ENOENT') {\n        res.json({ success: false, message: 'File not found' });\n      } else {\n        res.json({ success: false, message: 'Failed to load config' });\n      }\n    }\n  });\n\n  // Save configuration\n  app.post('/api/jack/config/:type', async (req, res) => {\n    try {\n      const { type } = req.params;\n      const { data } = req.body;\n\n      const fileMap: any = {\n        'admins': ADMINS_FILE,\n        'spam-words': SPAM_FILE,\n        'banned-patterns': BANNED_PATTERNS_FILE\n      };\n\n      const filePath = fileMap[type];\n      if (!filePath) {\n        return res.json({ success: false, message: 'Invalid config type' });\n      }\n\n      let fileContent;\n      if (type === 'spam-words') {\n        fileContent = data.join('\\n');\n        botConfig.spamWords = data;\n      } else if (type === 'banned-patterns') {\n        fileContent = data.join(', ');\n        botConfig.bannedPatterns = data;\n      } else if (type === 'admins') {\n        fileContent = data.join(', ');\n        botConfig.admins = data;\n        clubAdmins = data;\n      }\n\n      await fs.writeFile(filePath, fileContent, 'utf8');\n      logger.info(`Configuration ${type} updated: ${data.length} items`);\n\n      res.json({ success: true, message: 'Configuration saved' });\n    } catch (error) {\n      res.json({ success: false, message: 'Failed to save config' });\n    }\n  });\n\n  // Get bot status\n  app.get('/api/jack/status', (req, res) => {\n    const uptime = botState.startTime ? Date.now() - botState.startTime : 0;\n\n    res.json({\n      success: true,\n      connected: botState.connected,\n      connecting: botState.connecting,\n      clubCode: botState.clubCode,\n      clubName: botState.clubName,\n      uptime: uptime,\n      stats: botState.stats,\n      configLoaded: {\n        admins: botConfig.admins.length,\n        spamWords: botConfig.spamWords.length,\n        bannedPatterns: botConfig.bannedPatterns.length\n      }\n    });\n  });\n\n  // Send message endpoint\n  app.post('/api/jack/send-message', (req, res) => {\n    try {\n      const { message } = req.body;\n      if (!message) {\n        return res.json({ success: false, message: 'Message required' });\n      }\n\n      sendMessage(message);\n      res.json({ success: true, message: 'Message sent' });\n    } catch (error) {\n      res.json({ success: false, message: 'Failed to send message' });\n    }\n  });\n\n  // Connect bot endpoint\n  app.post('/api/jack/connect', (req, res) => {\n    try {\n      if (botState.connected) {\n        return res.json({ success: false, message: 'Already connected' });\n      }\n      connectToClub();\n      res.json({ success: true, message: 'Connecting...' });\n    } catch (error) {\n      res.json({ success: false, message: 'Failed to connect' });\n    }\n  });\n\n  // Disconnect bot endpoint\n  app.post('/api/jack/disconnect', (req, res) => {\n    try {\n      if (botState.socket) {\n        botState.socket.close();\n      }\n      botState.connected = false;\n      res.json({ success: true, message: 'Disconnected' });\n    } catch (error) {\n      res.json({ success: false, message: 'Failed to disconnect' });\n    }\n  });\n\n  // Restart bot endpoint\n  app.post('/api/jack/restart', async (req, res) => {\n    try {\n      logger.info('🔄 Bot restart requested from dashboard');\n      res.json({\n        success: true,\n        message: 'Bot restart initiated'\n      });\n\n      setTimeout(() => {\n        process.exit(0);\n      }, 1000);\n    } catch (error) {\n      res.json({ success: false, message: 'Failed to restart' });\n    }\n  });\n\n  // Initialize bot on server start\n  initializeBot();\n\n  logger.info('✅ Bot integration endpoints registered');\n  logger.info('📡 Bot API available at /api/jack/*');\n}\n","size_bytes":33773}},"version":1}